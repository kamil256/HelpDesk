@model HelpDesk.Models.UsersEditViewModel

@{
    ViewBag.Title = "Edit user";
}

<header>
    <div class="container">
        <h1>Edit user</h1>
    </div>
</header>

<section class="container">
    @using (Html.BeginForm())
    {
        @Html.AntiForgeryToken()
        <div class="form-horizontal">
            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
            
            @Html.HiddenFor(model => model.UserID)

            <div class="form-group">
                @Html.LabelFor(model => model.FirstName, new { @class = "control-label col-md-offset-1 col-md-2" })
                <div class="col-md-6">
                    @Html.TextBoxFor(model => model.FirstName, new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.FirstName, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.LastName, new { @class = "control-label col-md-offset-1 col-md-2" })
                <div class="col-md-6">
                    @Html.TextBoxFor(model => model.LastName, new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.LastName, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Email, new { @class = "control-label col-md-offset-1 col-md-2" })
                <div class="col-md-6">
                    @Html.TextBoxFor(model => model.Email, new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.Email, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Password, new { @class = "control-label col-md-offset-1 col-md-2" })
                <div class="col-md-6">
                    @Html.PasswordFor(model => model.Password, new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.Password, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.ConfirmPassword, new { @class = "control-label col-md-offset-1 col-md-2" })
                <div class="col-md-6">
                    @Html.PasswordFor(model => model.ConfirmPassword, new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.ConfirmPassword, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Phone, new { @class = "control-label col-md-offset-1 col-md-2" })
                <div class="col-md-6">
                    @Html.TextBoxFor(model => model.Phone, new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.Phone, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.MobilePhone, new { @class = "control-label col-md-offset-1 col-md-2" })
                <div class="col-md-6">
                    @Html.TextBoxFor(model => model.MobilePhone, new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.MobilePhone, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Company, new { @class = "control-label col-md-offset-1 col-md-2" })
                <div class="col-md-6">
                    @Html.TextBoxFor(model => model.Company, new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.Company, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Department, new { @class = "control-label col-md-offset-1 col-md-2" })
                <div class="col-md-6">
                    @Html.TextBoxFor(model => model.Department, new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.Department, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Role, new { @class = "control-label col-md-offset-1 col-md-2" })
                <div class="col-md-6">
                    @Html.DropDownListFor(model => model.Role, new SelectList(new[] { "User", "Admin" }), new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.Role, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                <div class="col-md-offset-3 col-md-6">
                    <input type="submit" value="Save" class="btn btn-blue" />
                    <button data-user-id="@Model.UserID" data-user-name="@Model.FirstName @Model.LastName" type="button" value="Delete" class="btn btn-blue delete-user-btn">Delete</button>
                </div>
            </div>
        </div>
    }

    <hr />

    @if (Model.Tickets.Count() == 0)
    {
        <h3>No tickets found...</h3>
    }
    else
    {
        <h3>List of tickets:</h3>

        <table class="table">
            <tr>
                <th>
                    Created on
                </th>
                <th>
                    Requested by
                </th>
                <th>
                    Title
                </th>
                <th>
                    Category
                </th>
                <th>
                    Status
                </th>
            </tr>

            @foreach (var item in Model.Tickets)
            {
                <tr onclick='document.location.href="@Url.Action("Edit", "Tickets", new { id = item.TicketID })"'>
                    <td>
                        @item.CreatedOn.ToString()
                    </td>
                    <td>
                       @(item.RequestedBy != null ? $"{item.RequestedBy.FirstName} {item.RequestedBy.LastName}" : "-")
                    </td>
                    <td>
                        @item.Title
                    </td>
                    <td>
                        @(item.Category != null ? item.Category.Name : "-")
                    </td>
                    <td>
                        <span class="status">@item.Status</span>
                    </td>
                </tr>
            }

        </table>
    }
</section>

@Html.Partial("_DeleteUserPartial")

<script>
    $(document).ready(function()
    {
        $("#Status").change(function() { $("#Page").val("1"); $("#filtering-form").submit(); });
        $("#AssignedToID").change(function() { $("#Page").val("1"); $("#filtering-form").submit(); });
        $("#CategoryID").change(function() { $("#Page").val("1"); $("#filtering-form").submit(); });
        $("#search-btn").click(function() { $("#Page").val("1"); });

        var statuses = document.getElementsByClassName("status");
        for (var i = 0; i < statuses.length; i++)
        {
            switch (statuses[i].innerHTML)
            {
                case "New":
                    statuses[i].className += " status-new";
                    break;
                case "In progress":
                    statuses[i].className += " status-in-progress";
                    break;
                case "Solved":
                    statuses[i].className += " status-solved";
                    break;
                case "Closed":
                    statuses[i].className += " status-closed";
                    break;
            }
        }
    });
</script>