@model HelpDesk.Models.UsersEditViewModel

@{
    ViewBag.Title = "User details";
}

@{
    AppUserManager userManager = HttpContext.Current.GetOwinContext().GetUserManager<AppUserManager>();
    string currentUserId = User.Identity.GetUserId();
    bool isCurrentUserAdmin = false;
    if (User.Identity.IsAuthenticated && userManager.IsInRole(currentUserId, "Admin"))
    {
        isCurrentUserAdmin = true;
    }
}

<header style="margin: 0;">
    <div class="container">
        <h1 @*style="margin-bottom: 30px;"*@>User details</h1>
        @*<div class="col-sm-offset-2 col-sm-8 col-lg-offset-3 col-lg-6">
            <div class="btn-group btn-group-justified">
                <a href='@Url.Action("Details", new { id = Model.UserID })' class="btn btn-default"><span class="glyphicon glyphicon-unchecked"></span> View</a>
                <a href='@Url.Action("Edit", new { id = Model.UserID })' class="btn btn-inverse"><span class="glyphicon glyphicon-check"></span> Edit</a>
                <a href='@Url.Action("Tickets", new { id = Model.UserID })' class="btn btn-default"><span class="glyphicon glyphicon-unchecked"></span> Tickets</a>
            </div>
        </div>*@
    </div>
</header>



<section class="container" style="padding: 0;">
    <style>
        @@media (min-width: 768px) {
            .details-panel {
                background-color: #F5F5F5;
                box-shadow: gray 0 0 10px;
                border-radius: 5px;
                padding: 30px 0; 

            }
        @@media (max-width: 767px) {
            .details-panel {
                padding: 0 !important;
            }
        }        
    </style>

    <ul class="horizontal-menu">
        <li class="selected"><a href='@Url.Action("Edit", new { id = Model.UserID })'>Personal information</a></li>
        <li><a href='@Url.Action("ChangePassword", new { id = Model.UserID })'>Change password</a></li>
        <li><a href='@Url.Action("Tickets", new { id = Model.UserID })'>Tickets</a></li>
        <li><a href='@Url.Action("History", new { id = Model.UserID })'>History</a></li>
    </ul>
</section>
<section class="container">
        @using (Html.BeginForm())
        {
            @Html.AntiForgeryToken()
            <div class="form-horizontal details-panel col-md-offset-1 col-md-10 col-lg-offset-2 col-lg-8" style="padding: 15px 0;">
                @Html.ValidationSummary(true, "", new { @class = "text-danger" })

                @*@Html.HiddenFor(model => model.UserID)*@

                <div class="form-group">
                    @Html.Label("ID", new { @class = "control-label col-sm-3" })
                    <div class="col-sm-8">
                        <p class="form-control-static">
                            @Html.DisplayFor(model => model.UserID)
                        </p>
                        @Html.ValidationMessageFor(model => model.UserID, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.FirstName, new { @class = "control-label col-sm-3" })
                    <div class="col-sm-8">
                        @Html.TextBoxFor(model => model.FirstName, new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.FirstName, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.LastName, new { @class = "control-label col-sm-3" })
                    <div class="col-sm-8">
                        @Html.TextBoxFor(model => model.LastName, new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.LastName, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.Email, new { @class = "control-label col-sm-3" })
                    <div class="col-sm-8">
                        @Html.TextBoxFor(model => model.Email, new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.Email, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.Password, new { @class = "control-label col-sm-3" })
                    <div class="col-sm-8">
                        @Html.PasswordFor(model => model.Password, new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.Password, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.ConfirmPassword, new { @class = "control-label col-sm-3" })
                    <div class="col-sm-8">
                        @Html.PasswordFor(model => model.ConfirmPassword, new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.ConfirmPassword, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.Phone, new { @class = "control-label col-sm-3" })
                    <div class="col-sm-8">
                        @Html.TextBoxFor(model => model.Phone, new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.Phone, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.MobilePhone, new { @class = "control-label col-sm-3" })
                    <div class="col-sm-8">
                        @Html.TextBoxFor(model => model.MobilePhone, new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.MobilePhone, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.Company, new { @class = "control-label col-sm-3" })
                    <div class="col-sm-8">
                        @Html.TextBoxFor(model => model.Company, new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.Company, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.Department, new { @class = "control-label col-sm-3" })
                    <div class="col-sm-8">
                        @Html.TextBoxFor(model => model.Department, new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.Department, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.Role, new { @class = "control-label col-sm-3" })
                    <div class="col-sm-8">
                        @{
                            var htmlAttributes = new Dictionary<string, object>();
                            htmlAttributes["class"] = "form-control";
                            if (!isCurrentUserAdmin)
                            {
                                htmlAttributes["disabled"] = "disabled";
                            }
                        }
                        @Html.DropDownListFor(model => model.Role, new SelectList(new[] { "User", "Admin" }), htmlAttributes)
                        @Html.ValidationMessageFor(model => model.Role, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    <div class="col-sm-offset-3 col-sm-8">
                        <input type="submit" value="Save" class="btn btn-blue" />
                    </div>
                </div>
            </div>
                            }
    </section>

@Html.Partial("_DeleteUserPartial")

<script>
    $(document).ready(function()
    {
        $("#Status").change(function() { $("#Page").val("1"); $("#filtering-form").submit(); });
        $("#AssignedToID").change(function() { $("#Page").val("1"); $("#filtering-form").submit(); });
        $("#CategoryID").change(function() { $("#Page").val("1"); $("#filtering-form").submit(); });
        $("#search-btn").click(function() { $("#Page").val("1"); });

        var statuses = document.getElementsByClassName("status");
        for (var i = 0; i < statuses.length; i++)
        {
            switch (statuses[i].innerHTML)
            {
                case "New":
                    statuses[i].className += " status-new";
                    break;
                case "In progress":
                    statuses[i].className += " status-in-progress";
                    break;
                case "Solved":
                    statuses[i].className += " status-solved";
                    break;
                case "Closed":
                    statuses[i].className += " status-closed";
                    break;
            }
        }
    });
</script>