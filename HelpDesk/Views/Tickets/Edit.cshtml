@model HelpDesk.Models.TicketsEditViewModel

@{
    ViewBag.Title = "Edit ticket";
}

@{
    AppUserManager userManager = HttpContext.Current.GetOwinContext().GetUserManager<AppUserManager>();
    string currentUserId = User.Identity.GetUserId();
    bool isCurrentUserAdmin = false;
    if (User.Identity.IsAuthenticated && userManager.IsInRole(currentUserId, "Admin"))
    {
        isCurrentUserAdmin = true;
    }
}

<header>
    <div class="container">
        <h1>Edit ticket</h1>
    </div>
</header>

<div class="container">
    @using (Html.BeginForm())
    {
        @Html.AntiForgeryToken()
        <div class="form-horizontal">
            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
            @Html.HiddenFor(model => model.TicketID)

            <div class="form-group">
                @Html.LabelFor(model => model.CreatedBy, new { @class = "control-label col-md-2" })
                <div class="col-md-8">
                    <p class="form-control-static">
                        @if (Model.CreatedBy != null)
                        {
                            <a href='@Url.Action("Edit", "Users", new { id = Model.CreatedBy.Id })'>@Model.CreatedBy.FirstName @Model.CreatedBy.LastName (@Model.CreatedBy.Email)</a>
                        }
                        else
                        {
                            <span>Deleted user</span>
                        }
                        on @Model.CreatedOn
                    </p>
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.RequestedByID, new { @class = "control-label col-md-2" })
                <div class="col-md-8 input-with-button">
                    @Html.HiddenFor(model => model.RequestedByID)
                    <input id="change-requestor-inp" value='@(Model.RequestedBy != null ? $"{Model.RequestedBy.FirstName} {Model.RequestedBy.LastName} ({Model.RequestedBy.Email})" : "-")' class="form-control" disabled="disabled" />
                    <button id="change-requestor-btn" type="button" class="btn btn-default btn-search" data-ticket-title="@Model.Title">
                        <span class="glyphicon glyphicon-search"></span>
                    </button>
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.AssignedToID, new { @class = "control-label col-md-2" })
                <div class="col-md-8">
                    @if (isCurrentUserAdmin)
                    {
                        @Html.DropDownListFor(
                                 expression: model => model.AssignedToID,
                                 selectList: new SelectList(Model.Admins.Select(u => new { UserID = u.Id, Name = $"{u.FirstName} {u.LastName}" }), "UserID", "Name"),
                                 optionLabel: "-",
                                 htmlAttributes: new { @class = "form-control" }
                             )
                    }
                    else
                    {
                        <input value='@(Model.AssignedTo != null ? $"{Model.AssignedTo.FirstName} {Model.AssignedTo.LastName} ({Model.AssignedTo.Email})" : "-")' class="form-control" disabled="disabled" />
                    }
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Status, new { @class = "control-label col-md-2" })
                <div class="col-md-8">
                    @if (isCurrentUserAdmin)
                    {
                        @Html.DropDownListFor(model => model.Status, new SelectList(new[] { "New", "In progress", "Solved", "Closed" }), new { @class = "form-control" })
                    }
                    else
                    {
                        <input value='@(Model.Status)' class="form-control" disabled="disabled" />
                    }
                    @Html.ValidationMessageFor(model => model.Status, "", new { @class = "text-danger" })
                </div>
            </div>
            
            <div class="form-group">
                @Html.LabelFor(model => model.CategoryID, new { @class = "control-label col-md-2" })
                <div class="col-md-8">
                    @Html.DropDownListFor(
                        expression: model => model.CategoryID,
                        selectList: new SelectList(Model.Categories.Select(c => new { CategoryID = c.CategoryID, Name = c.Name }), "CategoryID", "Name"),
                        optionLabel: "-",
                        htmlAttributes: new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.CategoryID, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Title, new { @class = "control-label col-md-2" })
                <div class="col-md-8">
                    @Html.TextBoxFor(model => model.Title, new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.Title, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Content, new { @class = "control-label col-md-2" })
                <div class="col-md-8">
                    @Html.TextAreaFor(model => model.Content, 7, 10, new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.Content, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Solution, new { @class = "control-label col-md-2" })
                <div class="col-md-8">
                    @{ 
                        Dictionary<string, object> htmlAttributes = new Dictionary<string, object>();
                        htmlAttributes["class"] = "form-control";
                        if (!isCurrentUserAdmin)
                        {
                            htmlAttributes["disabled"] = "disabled";
                        }
                    }
                    @Html.TextAreaFor(model => model.Solution, 7, 10, htmlAttributes)
                    @Html.ValidationMessageFor(model => model.Solution, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                <div class="col-md-offset-2 col-md-10">
                    <input type="submit" value="Save" class="btn btn-blue" />
                    @if (isCurrentUserAdmin)
                    {
                        <button data-ticket-id="@Model.TicketID" data-ticket-title="@Model.Title" type="button" class="btn btn-blue delete-ticket-btn">Delete</button>
                    }
                </div>
            </div>
        </div>
    }
</div>

@Html.Partial("_ChangeRequestorPartial")

@if (isCurrentUserAdmin)
{   
    @Html.Partial("_DeleteTicketPartial")
}
