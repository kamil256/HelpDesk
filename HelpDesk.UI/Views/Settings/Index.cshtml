@model HelpDesk.UI.ViewModels.Settings.IndexViewModel

@{
    ViewBag.Title = "Settings";
    IdentityHelper identityHelper = new IdentityHelper();
}

<div @*ng-app="HelpDesk"*@ ng-controller="Settings">
    <header>
        <h1>Settings</h1>
    </header>

    <main class="container">
        <div class="row">
            <div class="col-md-offset-1 col-md-10 col-lg-offset-2 col-lg-8">
                <div class="well">
                    @Html.ValidationSummary(true, "", new { @class = "text-danger" })

                    <div class="form-horizontal">
                        <div class="form-group ">
                            <label class="control-label col-sm-3">Automatic logout</label>
                            <div class="col-sm-8">
                                <div class="checkbox">
                                    <label>
                                        <input type="checkbox" ng-model="logOutAutomatically" />
                                        Log out automatically in this web browser (value stored in cookie)
                                    </label>
                                </div>
                            </div>
                        </div>
                    </div>

                    @using (@Html.BeginForm("Index", "Settings", FormMethod.Post, new { @class = "form-horizontal", autocomplete = "off" }))
                    {
                        @Html.AntiForgeryToken()

                        <div class="form-group ">
                            <label class="control-label col-sm-3">Notifications</label>
                            <div class="col-sm-8">
                                <div class="checkbox">
                                    <label>
                                        @Html.CheckBoxFor(x => x.NewTicketsNotifications)
                                        Send email notifications about new tickets
                                    </label>
                                </div>
                                @if (identityHelper.IsCurrentUserAnAdministrator())
                                {
                                    <div class="checkbox">
                                        <label>
                                            @Html.CheckBoxFor(x => x.AssignedTicketsNotifications)
                                            Send email notifications about assigned tickets
                                        </label>
                                    </div>
                                }
                                <div class="checkbox">
                                    <label>
                                        @Html.CheckBoxFor(x => x.SolvedTicketsNotifications)
                                        Send email notifications about solved tickets
                                    </label>
                                </div>
                                <div class="checkbox">
                                    <label>
                                        @Html.CheckBoxFor(x => x.ClosedTicketsNotifications)
                                        Send email notifications about closed tickets
                                    </label>
                                </div>
                            </div>
                        </div>

                        if (identityHelper.IsCurrentUserAnAdministrator())
                        {
                            <div class="form-group">
                                <label class="control-label col-sm-3">Users per page</label>
                                <div class="col-sm-8">
                                    <div class="numeric-input">
                                        <div class="pull-left">
                                            <span ng-mousedown="decrementUsersPerPage($event)" class="glyphicon glyphicon-chevron-left"></span>
                                        </div>
                                        <div class="pull-left">
                                            <input ng-model="usersPerPage" class="form-control" name="UsersPerPage" />
                                        </div>
                                        <div class="pull-left">
                                            <span ng-mousedown="incrementUsersPerPage($event)" class="glyphicon glyphicon-chevron-right"></span>
                                        </div>
                                    </div>
                                    @Html.ValidationMessageFor(model => model.UsersPerPage, "", new { @class = "text-danger" })
                                </div>
                            </div>
                        }

                        <div class="form-group">
                            <label class="control-label col-sm-3">Tickets per page</label>
                            <div class="col-sm-8">
                                <div class="numeric-input">
                                    <div class="pull-left">
                                        <span ng-mousedown="decrementTicketsPerPage($event)" class="glyphicon glyphicon-chevron-left"></span>
                                    </div>
                                    <div class="pull-left">
                                        <input ng-model="ticketsPerPage" class="form-control" name="TicketsPerPage" />
                                    </div>
                                    <div class="pull-left">
                                        <span ng-mousedown="incrementTicketsPerPage($event)" class="glyphicon glyphicon-chevron-right"></span>
                                    </div>
                                </div>
                                @Html.ValidationMessageFor(model => model.TicketsPerPage, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        if (identityHelper.IsCurrentUserAnAdministrator())
                        {
                            <div class="form-group">
                                <label class="control-label col-sm-3">Categories</label>
                                <div class="col-sm-8">
                                    <p>If you modify existing categories, then categories of tickets will also be modified. If you delete categories, then some tickets will not be assigned to any category.</p>
                                    <ul id="sortable-categories" ui-sortable ng-model="categories">
                                        <li ng-repeat="x in categories">
                                            <div class="pull-left">
                                                <span class="glyphicon glyphicon-option-vertical"></span>
                                            </div>
                                            <div class="pull-left">
                                                <input ng-model="x.categoryId" name="{{ 'Categories[' + $index + '].CategoryId' }}" value="{{ x.categoryId }}" type="hidden" />
                                                <input ng-model="x.name" name="{{ 'Categories[' + $index + '].Name' }}" value="{{ x.name }}" class="form-control" />
                                            </div>
                                            <div class="pull-left">
                                                <span class="glyphicon glyphicon-remove" ng-click="removeCategory($index)"></span>
                                            </div>
                                        </li>
                                    </ul>

                                    <div id="new-category">
                                        <div class="pull-left">
                                            <input ng-model="newCategoryName" class="form-control" />
                                        </div>
                                        <div class="pull-left">
                                            <span ng-click="addCategory()" class="glyphicon glyphicon-plus"></span>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        }

                        if (identityHelper.IsCurrentUserAnAdministrator())
                        {
                            <div class="form-group">
                                <label class="control-label col-sm-3">Tickets summary</label>
                                <div class="col-sm-8">
                                    <a href='@Url.Action("DownloadTicketsAsCSV", "Tickets")' class="btn btn-success">Download as CSV file</a>
                                </div>
                            </div>
                        }

                        <div class="form-group">
                            <div class="col-sm-offset-3 col-sm-8">
                                <input type="submit" value="Save" class="btn btn-primary" />
                            </div>
                        </div>
                    }
                </div>
            </div>
        </div>
    </main>
</div>

<script>
    var logOutAutomaticallyFromCookie = getCookie('logOutAutomatically');

    angular.module('HelpDesk').controller('Settings', function($scope)
    {
        $scope.logOutAutomatically = logOutAutomaticallyFromCookie !== 'no';
        $scope.usersPerPage = @Model.UsersPerPage;
        $scope.ticketsPerPage = @Model.TicketsPerPage;

        $('input[type=submit]').click(function()
        {
            if ($scope.logOutAutomatically)
                setCookie('logOutAutomatically', 'yes');
            else
                setCookie('logOutAutomatically', 'no');
        });

        $scope.decrementUsersPerPage = function(event)
        {
            event.preventDefault();
            if (isNaN($scope.usersPerPage))
                $scope.usersPerPage = 10;
            if ($scope.usersPerPage > 1)
                $scope.usersPerPage--;
        };

        $scope.incrementUsersPerPage = function(event)
        {
            event.preventDefault();
            if (isNaN($scope.usersPerPage))
                $scope.usersPerPage = 10;
            $scope.usersPerPage++;
        };

        $scope.decrementTicketsPerPage = function(event)
        {
            event.preventDefault();
            if (isNaN($scope.ticketsPerPage))
                $scope.ticketsPerPage = 10;
            if ($scope.ticketsPerPage > 1)
                $scope.ticketsPerPage--;
        };

        $scope.incrementTicketsPerPage = function(event)
        {
            event.preventDefault();
            if (isNaN($scope.ticketsPerPage))
                $scope.ticketsPerPage = 10;
            $scope.ticketsPerPage++;
        };

        $scope.preventTextHighlightOnMouseDown = function(event)
        {
            event.preventDefault();
        };

        $scope.categories = [];
        @foreach (var category in Model.Categories)
        {
            @: $scope.categories.push({ categoryId: '@category.CategoryId', name: '@category.Name' });
        }

        $scope.newCategoryName = '';

        $scope.addCategory = function()
        {
            $scope.categories.push({ categoryId: 0, name: $scope.newCategoryName });
            $scope.newCategoryName = '';
        };

        $scope.removeCategory = function(index)
        {
            $scope.categories.splice(index, 1);
        };
    });

    //$(document).ready(function()
    //{
    //    $("#sortable-categories").sortable({ cancel: "input,span.glyphicon-remove,span.glyphicon-plus" });
    //});
</script>
