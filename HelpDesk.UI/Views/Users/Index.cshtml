@{
    ViewBag.Title = "List of users";
    HelpDesk.UI.Infrastructure.IdentityHelper identityHelper = new HelpDesk.UI.Infrastructure.IdentityHelper();
}

<header>
    <h1>@ViewBag.Title</h1>

    <div class="container">
        <hr />
        <div class="row">
            <div class="form-group col-sm-offset-3 col-sm-6 col-md-offset-4 col-md-4">
                <label class="control-label">Search</label>
                <div class="input-with-button">
                    <input data-bind="textInput: filters.searchString, event: { keypress: searchUsersWhenEnterKeyPressed }" class="form-control" />
                    <button class="btn btn-default glyphicon glyphicon-search" data-bind="click: searchUsersAndFocusTheInput"></button>
                </div>
                <label class="radio-inline"><input data-bind="checked: filters.searchAllWords" value="false" name="searchAllWords" type="radio">Any word</label>
                <label class="radio-inline"><input data-bind="checked: filters.searchAllWords" value="true" name="searchAllWords" type="radio">All words</label>
            </div>
        </div>
    </div>
</header>

<main class="container">
    <h3 data-bind="visible: !users() || users().length === 0">No users found...</h3>
    
    <div data-bind="visible: users() && users().length > 0">
        <ul data-bind="visible: pages().length > 1, foreach: pages" class="pagination pull-left">
            <!-- ko if: $data == $root.pages()[0] -->
            <li>
                <a data-bind="click: function() { $root.changePageAndGetUsers(1); }" href="#">&laquo;</a>
            </li>
            <!-- /ko -->

            <li data-bind="css: { active: $data == $root.filters.pageNumber() }">
                <a data-bind="text: $data, click: function() { $root.changePageAndGetUsers($data) }" href="#"></a>
            </li>

            <!-- ko if: $data == $root.pages()[$root.pages().length - 1] -->
            <li>
                <a data-bind="click: function() { $root.changePageAndGetUsers($root.numberOfPages()) }" href="#">&raquo;</a>
            </li>
            <!-- /ko -->
        </ul>

        <div class="input-with-button sort-by form-inline pull-right">
            <label class="control-label">Sort by</label>
            <select data-bind="value: filters.sortBy, options: sortingOptions" class="form-control"></select>
            <button data-bind="click: function() { toggleSortingOrder(); }, css: { 'glyphicon-sort-by-attributes': !filters.descendingSort(), 'glyphicon-sort-by-attributes-alt': filters.descendingSort() }" class="btn btn-default glyphicon"></button>
        </div>

        <div class="users-list" data-bind="foreach: users">            
            <div class="well" data-bind="click: function() { $root.goToUserDetails(UserId); }">
                <p data-bind="html: $root.markSearchString(FirstName + ' ' + LastName)"></p>
                <div class="row">
                    <div class="col-xs-6 col-sm-4">
                        <p><span class="text-gray">Email:</span> <span class="value" data-bind="html: $root.markSearchString(Email)"></span></p>
                        <p><span class="text-gray">Phone:</span> <span class="value" data-bind="html: $root.markSearchString(Phone)"></span></p>
                        <p><span class="text-gray">Mobile phone:</span> <span class="value" data-bind="html: $root.markSearchString(MobilePhone)"></span></p>
                    </div>

                    <div class="col-xs-6 col-sm-4">
                        <p><span class="text-gray">Company:</span> <span class="value" data-bind="html: $root.markSearchString(Company)"></span></p>
                        <p><span class="text-gray">Department:</span> <span class="value" data-bind="html: $root.markSearchString(Department)"></span></p>
                        <p><span class="text-gray">Role:</span> <span class="value" data-bind="text: Role"></span></p>
                    </div>

                    <div class="hidden-xs col-sm-2">
                        <p class="text-gray">Last activity:</p>
                        <p data-bind="text: LastActivity"></p>
                    </div>

                    <div class="hidden-xs col-sm-2">
                        <p class="text-gray">Tickets:</p>
                        <p data-bind="text: TicketsCount"></p>
                    </div>
                </div>
            </div>
        </div>

        <ul data-bind="visible: pages().length > 1, foreach: pages" class="pagination pull-left">
            <!-- ko if: $data == $root.pages()[0] -->
            <li>
                <a data-bind="click: function() { $root.changePageAndGetUsers(1); }" href="#">&laquo;</a>
            </li>
            <!-- /ko -->

            <li data-bind="css: { active: $data == $root.filters.pageNumber() }">
                <a data-bind="text: $data, click: function() { $root.changePageAndGetUsers($data) }" href="#"></a>
            </li>

            <!-- ko if: $data == $root.pages()[$root.pages().length - 1] -->
            <li>
                <a data-bind="click: function() { $root.changePageAndGetUsers($root.numberOfPages()) }" href="#">&raquo;</a>
            </li>
            <!-- /ko -->
        </ul>

        <p class="pull-right result-info">Page <span data-bind="text: filters.pageNumber"></span> of <span data-bind="text: numberOfPages"></span> (<span data-bind="text: foundItemsCount"></span> item<span data-bind="visible: foundItemsCount() != 1">s</span> found of <span data-bind="text: totalItemsCount"></span> total)</p>
    </div>
</main>

<script>
    var filtersFromCookie = JSON.parse(getCookie('usersFilters_@identityHelper.CurrentUser.Id'));

    function UsersListViewModel()
    {
        var self = this;

        self.users = ko.observableArray([]);

        self.sortingOptions = ko.observableArray(["First name", "Last name", "Email", "Phone", "Mobile phone", "Company", "Department", "Role", "Last activity", "Tickets"]);
        self.numberOfPages = ko.observable();
        self.foundItemsCount = ko.observable();
        self.totalItemsCount = ko.observable();

        self.filters =
        {
            searchString: ko.observable(filtersFromCookie ? filtersFromCookie.search : ''),
            searchAllWords: ko.observable(filtersFromCookie ? filtersFromCookie.searchAllWords : 'false'),
            sortBy: ko.observable(filtersFromCookie ? filtersFromCookie.sortBy : 'Last name'),
            descendingSort: ko.observable(filtersFromCookie ? filtersFromCookie.descSort : false),
            pageNumber: ko.observable(1)
        };

        self.filters.searchString.extend({ rateLimit: { method: "notifyWhenChangesStop", timeout: 500 } });

        self.filters.searchString.subscribe(function()
        {
            self.changePageAndGetUsers(1);
        });

        self.filters.searchAllWords.subscribe(function()
        {
            if (removeExcessSpaces(self.filters.searchString()))
                self.changePageAndGetUsers(1);
        });

        self.filters.sortBy.subscribe(function()
        {
            self.changePageAndGetUsers(1);
        });

        self.filters.descendingSort.subscribe(function()
        {
            self.changePageAndGetUsers(1);
        });

        self.markSearchString = function(text)
        {
            var searchString = removeExcessSpaces(self.filters.searchString());
            if (searchString && text)
            {
                var words = searchString.split(' ');
                return mark(text, words);
            }
            else
                return text;
        };

        self.pages = ko.computed(function()
        {
            var pages = [];

            var leftBound = self.filters.pageNumber() - 2;
            var rightBound = self.filters.pageNumber() + 2;
            while (leftBound < 1)
            {
                leftBound++;
                rightBound++;
            }
            while (rightBound > self.numberOfPages())
            {
                rightBound--;
                if (leftBound > 1)
                    leftBound--;
            }
            for (var i = leftBound; i <= rightBound; i++)
                pages.push(i);

            return pages;
        });

        self.getUsers = function()
        {
            var data =
            {
                search: removeExcessSpaces(self.filters.searchString()),
                searchAllWords: self.filters.searchAllWords(),
                sortBy: self.filters.sortBy(),
                descSort: self.filters.descendingSort(),
                page: self.filters.pageNumber()
            };
            var onSuccess = function(response)
            {
                if (response.NumberOfPages != 0 && self.filters.pageNumber() > response.NumberOfPages)
                    self.changePageAndGetUsers(response.NumberOfPages);
                else
                {
                    self.users(response.Users);
                    self.numberOfPages(response.NumberOfPages);
                    self.foundItemsCount(response.FoundItemsCount);
                    self.totalItemsCount(response.TotalItemsCount);
                }
                setCookie('usersFilters_@identityHelper.CurrentUser.Id', JSON.stringify(data));
            };
            sendAjaxRequest("/api/Users", "GET", data, onSuccess);
        };

        self.changePageAndGetUsers = function(pageNumber)
        {
            self.filters.pageNumber(pageNumber);
            self.getUsers();
        };

        self.searchUsersWhenEnterKeyPressed = function(data, event)
        {
            if (event.keyCode === 13 || event.which === 13)
                self.changePageAndGetUsers(1);
            else
                return true;
        };

        self.searchUsersAndFocusTheInput = function(data, event)
        {
            self.changePageAndGetUsers(1);
            $(event.target).prev().focus();
        };

        self.toggleSortingOrder = function()
        {
            self.filters.descendingSort(!self.filters.descendingSort());
        };

        self.goToUserDetails = function(id)
        {
            document.location.href = '/Users/Edit/' + id;
        };

        self.getUsers();
    }

    $(document).ready(function()
    {
        ko.applyBindings(new UsersListViewModel());
    });
</script>