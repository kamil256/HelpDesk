@{
    ViewBag.Title = "Users";
    IdentityHelper identityHelper = new IdentityHelper();
}

<div ng-app="HelpDesk" ng-controller="UsersList">
    <header>
        <h1>List of users</h1>

        <div class="container">
            <hr />
            <div class="row">
                <div class="form-group col-sm-4">
                    <label class="control-label">Activity</label>
                    <select ng-model="filters.active" ng-options="x as x.text for x in activityOptions"  class="form-control">
                        <option value="">All</option>
                    </select>
                </div>

                <div class="form-group col-sm-4">
                    <label class="control-label">Role</label>
                    <select ng-model="filters.role" ng-options="x for x in roles" class="form-control">
                        <option value="">All</option>
                    </select>
                </div>

                <div class="form-group col-sm-4">
                    <label class="control-label">Search</label>

                    <div class="input-group">
                        <input id="search" ng-model="filters.searchString" ng-keypress="searchUsersWhenEnterKeyPressed($event)" class="form-control" />
                        <div class="input-group-btn">
                            <button class="btn btn-default" ng-click="searchUsersAndFocusTheInput()"><span class="glyphicon glyphicon-search"></span></button>
                        </div>
                    </div>

                    <label class="radio-inline"><input ng-model="filters.searchAllWords" value="false" name="searchAllWords" type="radio">Any word</label>
                    <label class="radio-inline"><input ng-model="filters.searchAllWords" value="true" name="searchAllWords" type="radio">All words</label>
                </div>
            </div>
        </div>
    </header>

    <main class="container">
        <h3 ng-show="!users || users.length === 0">No users found...</h3>

        <div ng-show="users && users.length > 0">
            <ul ng-show="pages.length > 1" class="pagination pull-left">
                <li>
                    <a ng-click="changePageAndGetUsers(1)" href="#">&laquo;</a>
                </li>

                <li ng-repeat="x in pages" ng-class="{ 'active': x === filters.pageNumber }" *@>
                    <a ng-click="changePageAndGetUsers(x)" href="#">{{ x }}</a>
                </li>

                <li>
                    <a ng-click="changePageAndGetUsers(numberOfPages)" href="#">&raquo;</a>
                </li>
            </ul>

            <div class="form-inline pull-right sort-by">
                <label class="control-label">Sort by</label>
                <div class="input-group">
                    <select ng-model="filters.sortBy" ng-options="x for x in sortingOptions" class="form-control"></select>
                    <div class="input-group-btn">
                        <button ng-click="toggleSortingOrder()" class="btn btn-default"><span class="glyphicon" ng-class="filters.descendingSort ? 'glyphicon-sort-by-attributes-alt' : 'glyphicon-sort-by-attributes'"></span></button>
                    </div>
                </div>
            </div>

            <div class="users-list">
                <div class="well" ng-repeat="x in users" ng-click="goToUserDetails(x.UserId)">
                    <p ng-bind-html="markSearchString(x.FirstName + ' ' + x.LastName)"></p>
                    <div class="row">
                        <div class="col-sm-4">
                            <p><span class="text-gray">Email:</span> <span ng-bind-html="markSearchString(x.Email)"></span></p>
                            <p><span class="text-gray">Phone:</span> <span ng-bind-html="markSearchString(x.Phone)"></span></p>
                            <p><span class="text-gray">Mobile phone:</span> <span ng-bind-html="markSearchString(x.MobilePhone)"></span></p>
                        </div>

                        <div class="col-sm-4">
                            <p><span class="text-gray">Company:</span> <span ng-bind-html="markSearchString(x.Company)"></span></p>
                            <p><span class="text-gray">Department:</span> <span ng-bind-html="markSearchString(x.Department)"></span></p>
                            <p><span class="text-gray">Role:</span> {{ x.Role }}</p>
                        </div>

                        <div class="hidden-xs col-sm-4 col-md-2">
                            <p><span class="text-gray">Active:</span> {{ x.Active ? 'Yes' : 'No' }}</p>
                            <p><span class="text-gray">Last activity:</span> {{ x.LastActivity }}</p>
                            <p class="hidden-md hidden-lg"><span class="text-gray">Tickets:</span> {{ x.TicketsCount }}</p>
                        </div>

                        <div class="hidden-xs hidden-sm col-md-2">
                            <p class="text-gray">Tickets:</p>
                            <p>{{ x.TicketsCount }}</p>
                        </div>
                    </div>
                </div>
            </div>

            <ul ng-show="pages.length > 1" class="pagination pull-left">
                <li>
                    <a ng-click="changePageAndGetUsers(1)" href="#">&laquo;</a>
                </li>

                <li ng-repeat="x in pages" ng-class="{ 'active': x === filters.pageNumber }" *@>
                    <a ng-click="changePageAndGetUsers(x)" href="#">{{ x }}</a>
                </li>

                <li>
                    <a ng-click="changePageAndGetUsers(numberOfPages)" href="#">&raquo;</a>
                </li>
            </ul>

            <p class="pull-right result-info">Page {{ filters.pageNumber }} of {{ numberOfPages }} ({{ foundItemsCount }} item<span ng-show="foundItemsCount > 1">s</span> found of {{ totalItemsCount }} total)</p>
        </div>
    </main>
</div>

<script>
    var filtersFromCookie = JSON.parse(getCookie('usersFilters_@identityHelper.CurrentUser.Id'));

    angular.module('HelpDesk').controller('UsersList', function($scope, $http, $timeout, timer)
    {
        $scope.users = [];
        $scope.activityOptions = [{ text: 'Active', value: 'true' }, { text: 'Inactive', value: 'false' }];
        $scope.roles = ['Admin', 'User'];
        $scope.sortingOptions = ["First name", "Last name", "Email", "Phone", "Mobile phone", "Company", "Department", "Role", "Last activity", "Tickets"];
        $scope.numberOfPages = 0;
        $scope.foundItemsCount = 0;
        $scope.totalItemsCount = 0;

        $scope.filters =
        {
            active: filtersFromCookie ? (filtersFromCookie.active === 'true' ? $scope.activityOptions[0] : (filtersFromCookie.active === 'false' ? $scope.activityOptions[1] : undefined)) : undefined,
            role: filtersFromCookie ? filtersFromCookie.role : '',
            searchString: filtersFromCookie ? filtersFromCookie.search : '',
            searchAllWords: filtersFromCookie ? filtersFromCookie.searchAllWords : 'false',
            sortBy: filtersFromCookie ? filtersFromCookie.sortBy : 'Last name',
            descendingSort: filtersFromCookie ? filtersFromCookie.descSort : false,
            pageNumber: 1
        };

        $scope.$watch('filters.active', function(newValue, oldValue)
        {
            if (newValue !== oldValue)
            {
                $scope.changePageAndGetUsers(1);
            }
        });

        $scope.$watch('filters.role', function(newValue, oldValue)
        {
            if (newValue !== oldValue)
            {
                $scope.changePageAndGetUsers(1);
            }
        });

        var searchStringTimeout;
        $scope.$watch('filters.searchString', function(newValue, oldValue)
        {
            if (newValue !== oldValue)
            {
                $timeout.cancel(searchStringTimeout);
                searchStringTimeout = $timeout(function()
                {
                    $scope.changePageAndGetUsers(1);
                }, 500);
            }
        });

        $scope.$watch('filters.searchAllWords', function(newValue, oldValue)
        {
            if (newValue !== oldValue)
            {
                if (removeExcessSpaces($scope.filters.searchString))
                    $scope.changePageAndGetUsers(1);
            }
        });

        $scope.$watch('filters.sortBy', function(newValue, oldValue)
        {
            if (newValue !== oldValue)
            {
                $scope.changePageAndGetUsers(1);
            }
        });

        $scope.$watch('filters.descendingSort', function(newValue, oldValue)
        {
            if (newValue !== oldValue)
            {
                $scope.changePageAndGetUsers(1);
            }
        });

        $scope.markSearchString = function(text)
        {
            var searchString = removeExcessSpaces($scope.filters.searchString);
            if (searchString && text)
            {
                var words = searchString.split(' ');
                return mark(text, words);
            }
            else
                return text;
        };

        $scope.computePages = function()
        {
            var pages = [];

            var leftBound = $scope.filters.pageNumber - 2;
            var rightBound = $scope.filters.pageNumber + 2;
            while (leftBound < 1)
            {
                leftBound++;
                rightBound++;
            }
            while (rightBound > $scope.numberOfPages)
            {
                rightBound--;
                if (leftBound > 1)
                    leftBound--;
            }
            for (var i = leftBound; i <= rightBound; i++)
                pages.push(i);

            return pages;
        };

        $scope.getUsers = function()
        {
            var data =
            {
                active: $scope.filters.active ? $scope.filters.active.value.toString() : null,
                role: $scope.filters.role,
                search: removeExcessSpaces($scope.filters.searchString),
                searchAllWords: $scope.filters.searchAllWords,
                sortBy: $scope.filters.sortBy,
                descSort: $scope.filters.descendingSort,
                page: $scope.filters.pageNumber
            };

            var onSuccess = function(response)
            {
                if (response.NumberOfPages != 0 && $scope.filters.pageNumber > response.NumberOfPages)
                    $scope.changePageAndGetUsers(response.NumberOfPages);
                else
                {
                    $scope.users = response.Users;
                    $scope.numberOfPages = response.NumberOfPages;
                    $scope.foundItemsCount = response.FoundItemsCount;
                    $scope.totalItemsCount = response.TotalItemsCount;

                    $scope.pages = $scope.computePages();
                }
                setCookie('usersFilters_@identityHelper.CurrentUser.Id', JSON.stringify(data));
            };

            sendAjaxRequest('@Url.RouteUrl("DefaultApi", new { httproute = "", controller = "Users" })', 'GET', data, onSuccess, $http, timer);
        };

        $scope.changePageAndGetUsers = function(pageNumber)
        {
            $scope.filters.pageNumber = pageNumber;
            $scope.getUsers();
        };

        $scope.searchUsersWhenEnterKeyPressed = function(event)
        {
            if (event.keyCode === 13 || event.which === 13)
                $scope.changePageAndGetUsers(1);
        };

        $scope.searchUsersAndFocusTheInput = function(event)
        {
            $scope.changePageAndGetUsers(1);
            $('#search').focus();
        };

        $scope.toggleSortingOrder = function()
        {
            $scope.filters.descendingSort = !$scope.filters.descendingSort;
        };

        $scope.goToUserDetails = function(id)
        {
            document.location.href = '@Url.Action("Edit", "Users")/' + id;
        };

        $scope.getUsers();
    });
</script>
