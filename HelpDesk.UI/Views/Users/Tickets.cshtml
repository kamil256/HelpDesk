@using HelpDesk.UI.Infrastructure;

@model HelpDesk.UI.ViewModels.Users.TicketsViewModel

@{
    ViewBag.Title = "User details";
    IdentityHelper identityHelper = new IdentityHelper();
}

<script>
    function TicketsViewModel()
    {
        var self = this;

        self.tickets = ko.observableArray([]);
        self.currentTicket = ko.observable();
        self.currentUser = ko.observable();

        self.numberOfPages = ko.observable();
        self.pages = ko.computed(function()
        {
            var pages = [];
            for (var i = 1; i <= self.numberOfPages(); i++)
                pages.push(i);
            return pages;
        });

        self.statuses = ["All", "New", "In progress", "Solved", "Closed"];
        self.administrators = ko.observableArray([]);
        self.categories = ko.observableArray([]);
        self.sortingOptions = ko.observableArray(["Created on", "Requested by", "Title", "Category", "Status"]);

        self.filter =
        {
            status: ko.observable(),
            assignedTo: ko.observable(),
            category: ko.observable(),
            search: ko.observable(),
            advancedSearch: ko.observable(false),
            sortBy: ko.observable("Created on"),
            descSort: ko.observable(true),
            page: ko.observable(1)
        };

        self.getTickets = function()
        {
            $.ajax("/api/Tickets",
            {
                type: "GET",
                data:
                {
                    UserId: '@Model.UserId',
                    Status: self.filter.status(),
                    AssignedToID: self.filter.assignedTo() ? self.filter.assignedTo().UserId : null,
                    CategoryID: self.filter.category() ? self.filter.category().CategoryId : null,
                    Search: self.filter.search(),
                    AdvancedSearch: self.filter.advancedSearch(),
                    SortBy: self.filter.sortBy,
                    DescSort: self.filter.descSort,
                    Page: self.filter.page()
                },
                success: function(data)
                {
                    self.tickets(data.Tickets);
                    self.numberOfPages(data.NumberOfPages);
                },
                error: function()
                {
                    displayNewFailMessage("Problem with connection. Try again, and if the problem persists contact your system administrator.");
                }
            });
        };

        self.getAdministrators = function()
        {
            $.ajax("/api/Users",
            {
                type: "GET",
                data:
                {
                    Role: "Admin",
                    Page: 0
                },
                success: function(data)
                {
                    for (var i = 0; i < data.Users.length; i++)
                        data.Users[i].Name = data.Users[i].FirstName + " " + data.Users[i].LastName;
                    self.administrators(data.Users);
                },
                error: function()
                {
                    displayNewFailMessage("Problem with connection. Try again, and if the problem persists contact your system administrator.");
                }
            });
        };

        self.getCategories = function()
        {
            $.ajax("/api/Categories",
            {
                type: "GET",
                success: function(data)
                {
                    self.categories(data);
                },
                error: function()
                {
                    displayNewFailMessage("Problem with connection. Try again, and if the problem persists contact your system administrator.");
                }
            });
        };

        self.assignUser = function()
        {
            $.ajax("/Tickets/AssignUserToTicket",
            {
                type: "POST",
                data:
                {
                    ticketId: self.currentTicket().TicketId,
                    userId: self.currentUser().UserId
                },
                success: function(data)
                {
                    if (data.Success)
                        displayNewSuccessMessage(data.Success);
                    if (data.Fail)
                        displayNewFailMessage(data.Fail);
                    self.getTickets();
                },
                error: function()
                {
                    displayNewFailMessage("Problem with connection. Try again, and if the problem persists contact your system administrator.");
                }
            });
        };

        self.solution = ko.observable("");

        self.solveTicket = function()
        {
            $.ajax("/Tickets/SolveTicket",
            {
                type: "POST",
                data:
                {
                    ticketId: self.currentTicket().TicketId,
                    userId: self.currentUser().UserId,
                    solution: self.solution
                },
                success: function(data)
                {
                    if (data.Success)
                        displayNewSuccessMessage(data.Success);
                    if (data.Fail)
                        displayNewFailMessage(data.Fail);
                    self.getTickets();
                },
                error: function()
                {
                    displayNewFailMessage("Problem with connection. Try again, and if the problem persists contact your system administrator.");
                }
            });
        };

        self.closeTicket = function()
        {
            $.ajax("/Tickets/CloseTicket",
            {
                type: "POST",
                data:
                {
                    ticketId: self.currentTicket().TicketId
                },
                success: function(data)
                {
                    if (data.Success)
                        displayNewSuccessMessage(data.Success);
                    if (data.Fail)
                        displayNewFailMessage(data.Fail);
                    self.getTickets();
                },
                error: function()
                {
                    displayNewFailMessage("Problem with connection. Try again, and if the problem persists contact your system administrator.");
                }
            });
        };

        self.sort = function(data, event)
        {
            var sortBy = event.target.textContent;
            if (self.filter.sortBy() === sortBy)
                self.filter.descSort(!self.filter.descSort());
            else
                self.filter.sortBy(sortBy);
            self.getTickets();
        };

        self.getSortSymbol = ko.computed(function()
        {
            if (self.filter.descSort())
                return "\u25BC";
            else
                return "\u25B2";
        });

        self.getTickets();
        self.getAdministrators();
        self.getCategories();
    }

    function formatDate(ticks)
    {
        function padZero(value)
        {
            return value < 10 ? "0" + value : value;
        }

        var date = new Date(Number(ticks));
        var year = date.getFullYear();
        var month = padZero(date.getMonth() + 1);
        var day = padZero(date.getDate());
        var hours = padZero(date.getHours());
        var minutes = padZero(date.getMinutes());
        var seconds = padZero(date.getSeconds());
        return year + "-" + month  + "-" + day + " " + hours + ":" + minutes + ":" + seconds;
    }

    $(document).ready(function()
    {
        ko.applyBindings(new TicketsViewModel());
    });
</script>

<header>
    <h1>@ViewBag.Title</h1>
</header>

<nav class="container horizontal-menu hidden-xs">
    @Html.ActionLink("Personal information", "Edit", new { id = Model.UserId })
    @Html.ActionLink("Change password", "ChangePassword", new { id = Model.UserId })
    @Html.ActionLink("Tickets", "Tickets", new { id = Model.UserId }, new { @class = "selected" })
    @Html.ActionLink("History", "History", new { id = Model.UserId })
</nav>

<nav class="container btn-group horizontal-menu-xs visible-xs">
    <a href="@Url.Action("Edit", new { id = Model.UserId })" class="btn btn-primary glyphicon glyphicon-pencil"></a>
    <a href="@Url.Action("ChangePassword", new { id = Model.UserId })" class="btn btn-primary glyphicon glyphicon-lock"></a>
    <a href="@Url.Action("Tickets", new { id = Model.UserId })" class="btn btn-primary glyphicon glyphicon-list active"></a>
    <a href="@Url.Action("History", new { id = Model.UserId })" class="btn btn-primary glyphicon glyphicon-time"></a>
</nav>

<main class="container">
    <style>
        .ticket-item:hover {
            background-color: #F5EECD !important;
            cursor: pointer;
            /*border-radius: 10px;*/
            /*outline: 1px solid #E3D179;*/
        }

        .ticket-item p {
            margin-bottom: 3px;
            transition: height 5s;
            -webkit-transition: height 5s;
        }
    </style>



    <div data-bind="foreach: tickets" style="margin-bottom: 20px;">
        <div class="ticket-item" data-bind="click: function() { document.location.href = '/Tickets/Edit/' + TicketId; }" style="box-shadow: gray 0 0 10px; display: table; clear: both; background-color: #F5F5F5; border-radius: 5px; width: 100%; margin-top: 10px;">
            <div style="display: table-row;">
                <div class="hidden-xs" style="display: table-cell; width: 150px; border-right: 1px dashed gray; vertical-align: middle; text-align: center;">
                    <p style="color: gray;">#<span data-bind="text: TicketId"></span></p>
                    <p style="font-weight: bold; font-size: 20px" data-bind="text: Status, css: { 'status-new': Status == 'New',
                                                                                                                   'status-in-progress': Status == 'In progress',
                                                                                                                   'status-solved': Status == 'Solved',
                                                                                                                   'status-closed': Status == 'Closed' }"></p>
                </div>

                <div style="padding: 10px; display: table-cell;">
                    <div><p style="font-size: 22px; margin-bottom: 10px;" data-bind="text: Title"></p></div>
                    @*<p>*@
                    @*Created at*@ <p><span style="color: gray">Date:</span> <span data-bind="text: formatDate(CreateDate)"></span> @*by*@</p>
                    @*<b>
                            <!-- ko if: (CreatedBy) -->
                                <a href="#" data-bind="click: function(data, event) { event.stopPropagation(); document.location.href = '/Users/Edit/' + CreatedById; }, text: CreatedBy"></a>
                            <!-- /ko -->

                            <!-- ko if: (!CreatedBy) -->
                                <span data-bind="visible: !CreatedBy">deleted user</span>
                            <!-- /ko -->
                        </b>
                        for*@
                    <p>
                        <span style="color: gray">User:</span>
                        <span>
                            <!-- ko if: (RequesterName) -->
                            <a href="#" data-bind="click: function(data, event) { event.stopPropagation(); document.location.href = '/Users/Edit/' + RequesterId; }, text: RequesterName"></a>
                            <!-- /ko -->
                            <!-- ko if: (!RequesterName) -->
                            <span data-bind="visible: !RequesterName">deleted user</span>
                            <!-- /ko -->
                        </span>
                    </p>
                    @*</p>*@
                    <p><span style="color: gray">Category:</span> <span data-bind="text: Category ? Category : 'none'"></span></p>
                    <p class="visible-xs">
                        <span style="color: gray">Status:</span> <span data-bind="text: Status, css: { 'status-new': Status == 'New',
                                                                           'status-in-progress': Status == 'In progress',
                                                                           'status-solved': Status == 'Solved',
                                                                           'status-closed': Status == 'Closed' }"></span>@*</p>*@
                                                                        @*<!-- ko if: (AssignedUserName) -->
                                                                                <p data-bind="visible: AssignedUserName">Assigned to: <b><a href="#" data-bind="click: function(data, event) { event.stopPropagation(); document.location.href = '/Users/Edit/' + AssignedToId; }, text: AssignedTo"></a></b></p>
                                                                            <!-- /ko -->*@
                                                                </div>

                                                                @if (identityHelper.IsCurrentUserAnAdministrator())
                                                                {
                                                                    <div class="hidden-xs" style="width: 180px; display: table-cell; aborder-left: 1px dashed gray; vertical-align: bottom">
                                                                        <button title="Close ticket" data-bind="click: function(data, event) { $root.currentTicket(data); event.stopPropagation(); $('#close-ticket-dialog').modal('show'); }" class="btn btn-sm btn-inverse pull-right" style="width: 50px; margin: 10px 10px 10px 0;"><span class="glyphicon glyphicon-remove"></span>@*Close*@</button>
                                                                        <button title="Solve ticket" data-bind="click: function(data, event) { $root.currentTicket(data); event.stopPropagation(); $('#solve-ticket-dialog').modal('show'); }" class="btn btn-sm btn-success pull-right" style="width: 50px; margin: 10px 3px 10px 0;"><span class="glyphicon glyphicon-ok"></span>@*Solve*@</button>
                                                                        <button title="Assign administrator to ticket" data-bind="click: function(data, event) { $root.currentTicket(data); event.stopPropagation(); $('#assign-user-dialog').modal('show'); @*openAssignUserDialog(event);*@ }" class="btn btn-sm btn-primary pull-right" style="width: 50px; margin: 10px 3px 10px 0;">+<span class="glyphicon glyphicon-user"></span>@*Assign*@</button>
                                                                    </div>
                                                                }
                                                            </div>
                                                        </div>
                                                    </div>

    <!-- ko if: pages().length >= 2 -->
        <ul data-bind="foreach: pages" class="pagination" style="margin: 0;">
            <li data-bind="css: { active: $data == $root.filter.page() }">
                <a data-bind="text: $data, click: function() { $root.filter.page($data); $root.getTickets(); }" href="#"></a>
            </li>
        </ul>
    <!-- /ko -->
</main>

@if (identityHelper.IsCurrentUserAnAdministrator())
{
    <!-- ko if: currentTicket() -->
        <div id="assign-user-dialog" class="modal fade">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times</button>
                        <h4 class="modal-title">Assign administrator to ticket</h4>
                    </div>

                    <div class="modal-body">
                        <div class="form-group">
                            <label class="control-label">Administrator</label>
                            <select data-bind="options: administrators, optionsText: 'Name', value: currentUser" class="form-control"></select>
                        </div>
                    </div>

                    <div class="modal-footer">
                        <button data-bind="click: function() { assignUser(); }" data-dismiss="modal" class="btn btn-primary">Ok</button>
                        <button data-dismiss="modal" class="btn btn-primary">Cancel</button>                    
                    </div>
                </div>
            </div>
        </div>
    
        <div id="solve-ticket-dialog" class="modal fade">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times</button>
                        <h4 class="modal-title">Solve ticket</h4>
                    </div>

                    <div class="modal-body">
                        <div class="form-group">
                            <label class="control-label">Administrator</label>
                            <select data-bind="options: administrators, optionsText: 'Name', value: currentUser" class="form-control"></select>
                        </div>

                        <div class="form-group">
                            <label class="control-label">Solution</label>
                            <textarea data-bind="value: solution" cols="10" rows="7" class="form-control"></textarea>
                        </div>
                    </div>

                    <div class="modal-footer">
                        <button data-dismiss="modal" data-bind="click: function() { solveTicket(); }" class="btn btn-blue">Ok</button>
                        <button data-dismiss="modal" class="btn btn-blue">Cancel</button>
                    </div>
                </div>
            </div>
        </div>

        <div id="close-ticket-dialog" class="modal fade">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times</button>
                        <h4 class="modal-title">Close ticket</h4>
                    </div>

                    <div class="modal-body">
                        Are you sure you want to close ticket?
                    </div>

                    <div class="modal-footer">
                        <button data-dismiss="modal" data-bind="click: function() { closeTicket(); }" class="btn btn-blue">Yes</button>
                        <button data-dismiss="modal" class="btn btn-blue">No</button>
                    </div>
                </div>
            </div>
        </div>
    <!-- /ko -->
}