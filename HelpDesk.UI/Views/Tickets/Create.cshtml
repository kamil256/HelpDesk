@model HelpDesk.UI.ViewModels.Tickets.CreateViewModel

@{
    ViewBag.Title = "New ticket";
}

<header>
    <h1>Add new ticket</h1>
</header>

<main class="container">
    <div class="row">
        <div class="col-md-offset-1 col-md-10 col-lg-offset-2 col-lg-8">
            <div class="well">
                @Html.ValidationSummary(true, "", new { @class = "text-danger" })
    
                @using (Html.BeginForm("Create", "Tickets", FormMethod.Post, new { @class = "form-horizontal", autocomplete = "off" }))
                {
                    @Html.AntiForgeryToken()
            
                    <div class="form-group">
                        @Html.LabelFor(model => model.RequesterId, new { @class = "control-label col-sm-3" })
                        <input type="hidden" name="RequesterId" data-bind="value: requester() ? requester().UserId : null" />
                        <div class="col-sm-8 "> 
                            <div class="input-group">
                                <input data-bind="value: requesterNameAndEmail" class="form-control" disabled="disabled" />
                                <div class="input-group-btn">
                                    <button data-bind="click: function() { $('#change-requester-dialog').modal('show'); }" class="btn btn-default"><span class="glyphicon glyphicon-search"></span></button>
                                </div>
                            </div>
                            @Html.ValidationMessageFor(model => model.RequesterId, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.CategoryId, new { @class = "control-label col-sm-3" })
                        <div class="col-sm-8">
                            @Html.DropDownListFor(
                                expression: model => model.CategoryId,
                                selectList: new SelectList(Model.Categories, "CategoryId", "Name"),
                                optionLabel: "-",
                                htmlAttributes: new { @class = "form-control" }
                            )
                            @Html.ValidationMessageFor(model => model.CategoryId, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group wide-form-group">
                        @Html.LabelFor(model => model.Title, new { @class = "control-label col-sm-3" })
                        <div class="col-sm-8">
                            @Html.TextBoxFor(model => model.Title, new { @class = "form-control" })
                            @Html.ValidationMessageFor(model => model.Title, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group wide-form-group">
                        @Html.LabelFor(model => model.Content, new { @class = "control-label col-sm-3" })
                        <div class="col-sm-8">
                            @Html.TextAreaFor(model => model.Content, 7, 10, new { @class = "form-control" })
                            @Html.ValidationMessageFor(model => model.Content, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        <div class="col-sm-offset-3 col-sm-8">
                            <input type="submit" value="Create" class="btn btn-primary" />
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>
</main>

<div id="change-requester-dialog" class="modal fade">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
                <h4 class="modal-title">Change requester</h4>
            </div>

            <div class="modal-body">
                <div class="form-group">
                    <label class="control-label">Find users</label>
                    
                    <div class="input-group">
                        <input data-bind="textInput: searchString, event: { keypress: searchTicketsWhenEnterKeyPressed }" class="form-control" />
                        <div class="input-group-btn">
                            <button data-bind="click: searchTicketsAndFocusTheInput" class="btn btn-default"><span class="glyphicon glyphicon-search"></span></button>
                        </div>
                    </div>
                </div>

                <div class="form-group">
                    <label>Select user</label>
                    <select size="10" data-bind="options: foundUsers, value: selectedUser, optionsText: function(item) { return item.FirstName + ' ' + item.LastName + ' (' + item.Email + ')' }, optionsCaption: '-'" class="form-control"></select>
                </div>

                <p>Displaying <span data-bind="text: foundUsers().length"></span> users of <span data-bind="text: totalNumberOfFoundUsers"></span> found</p>
            </div>

            <div class="modal-footer">
                <input data-bind="click: function() { requester(selectedUser()); }" data-dismiss="modal" type="submit" value="Ok" class="btn btn-primary" /><input data-dismiss="modal" type="button" value="Cancel" class="btn btn-default" />
            </div>
        </div>
    </div>
</div>

<script>
    function CreateTicketViewModel()
    {
        var self = this;

        self.requester = ko.observable(@Html.Raw(Json.Encode(@Model.Requester)));
        self.searchString = ko.observable('');
        self.selectedUser = ko.observable();
        self.foundUsers = ko.observableArray([]);
        self.totalNumberOfFoundUsers = ko.observable(0);

        self.requesterNameAndEmail = ko.computed(function()
        {
            return self.requester() ? self.requester().FirstName + " " + self.requester().LastName + " (" + self.requester().Email + ")" : "-";
        });

        self.searchString.extend({ rateLimit: { method: "notifyWhenChangesStop", timeout: 500 } });

        self.searchString.subscribe(function()
        {
            self.getUsers();
        });

        self.getUsers = function()
        {
            if (!self.searchString().trim())
            {
                self.foundUsers([]);
                self.totalNumberOfFoundUsers(0);
            }
            else
            {
                var data =
                {
                    search: self.searchString().trim(),
                    sortBy: 'First name',
                    descSort: false,
                    page: 1,
                    usersPerPage: 10
                };
                var onSuccess = function(response)
                {
                    self.foundUsers(response.Users);
                    self.totalNumberOfFoundUsers(response.FoundItemsCount);
                };
                sendAjaxRequest('@Url.RouteUrl("DefaultApi", new { httproute = "", controller = "Users" })', "GET", data, onSuccess);
            }
        };

        self.searchTicketsWhenEnterKeyPressed = function(data, event)
        {
            if (event.keyCode === 13 || event.which === 13)
                self.getUsers();
            else
                return true;
        };

        self.searchTicketsAndFocusTheInput = function(data, event)
        {
            self.getUsers();
            $(event.target).prev().focus();
        };
    }

    $(document).ready(function()
    {
        ko.applyBindings(new CreateTicketViewModel(), document.getElementById('viewContent'));
    });
</script>