@model HelpDesk.UI.ViewModels.Tickets.CreateViewModel

@{
    ViewBag.Title = "New ticket";
}

<script>
    function TicketsViewModel() {
        var self = this;

        self.requester =
        {
            UserId: ko.observable(@(Model.Requester != null ? Html.Raw($"'{@Model.Requester.Id}'") : null)),
            FirstName: ko.observable(@(Model.Requester != null ? Html.Raw($"'{@Model.Requester.FirstName}'") : null)),
            LastName: ko.observable(@(Model.Requester != null ? Html.Raw($"'{@Model.Requester.LastName}'") : null)),
            Email: ko.observable(@(Model.Requester != null ? Html.Raw($"'{@Model.Requester.Email}'") : null))
        };

        self.requesterNameAndEmail = ko.computed(function () {
            return self.requester.UserId() ? self.requester.FirstName() + " " + self.requester.LastName() + " (" + self.requester.Email() + ")" : "-";
        });

        self.searchedUser = ko.observable("");
        self.users = ko.observableArray([]);
        self.numberOfUsersToDisplay = ko.computed(function () {
            return self.users().length;
        });
        self.numberOfUsersFound = ko.observable(0);
        self.selectedUser = ko.observable();
        self.getUsers = function () {
            $.ajax("/api/Users",
            {
                type: "GET",
                data:
                {
                    search: self.searchedUser(),
                    advancedSearch: false,
                    page: 1,
                    usersPerPage: 1
                },
                success: function (data) {
                    self.users(data.Users);
                    self.numberOfUsersFound(data.NumberOfUsersFound);
                },
                error: function()
                {
                    displayNewFailMessage("Problem with connection. Try again, and if the problem persists contact your system administrator.");
                }
            });
        };

        self.changeRequester = function () {
            if (self.selectedUser()) {
                self.requester.UserId(self.selectedUser().UserId);
                self.requester.FirstName(self.selectedUser().FirstName);
                self.requester.LastName(self.selectedUser().LastName);
                self.requester.Email(self.selectedUser().Email);
            }
            else {
                self.requester.UserId(null);
                self.requester.FirstName(null);
                self.requester.LastName(null);
                self.requester.Email(null);
            }
        }
    }

    $(document).ready(function () {
        ko.applyBindings(new TicketsViewModel());

    });
</script>

<header>
    <h1>@ViewBag.Title</h1>
</header>

<main class="container">
    <div class="row">
        <div class="col-md-offset-1 col-md-10 col-lg-offset-2 col-lg-8">
            <div class="well">
                @Html.ValidationSummary(true, "", new { @class = "text-danger" })
    
                @using (Html.BeginForm("Create", "Tickets", FormMethod.Post, new { @class = "form-horizontal" }))
                {
                    @Html.AntiForgeryToken()
            
                    <div class="form-group">
                        @Html.LabelFor(model => model.RequesterId, new { @class = "control-label col-sm-3" })
                        <input type="hidden" name="RequesterId" data-bind="value: requester.UserId" />
                        <div class="col-sm-8 "> 
                            <div class="input-with-button">
                                <input data-bind="value: requesterNameAndEmail" class="form-control" disabled="disabled" />
                                <button type="button" data-bind="click: function(data, event) { $('#change-requester-dialog').modal('show'); }" class="btn btn-default btn-search glyphicon glyphicon-search"></button>
                            </div>
                            @Html.ValidationMessageFor(model => model.RequesterId, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.CategoryId, new { @class = "control-label col-sm-3" })
                        <div class="col-sm-8">
                            @Html.DropDownListFor(
                                expression: model => model.CategoryId,
                                selectList: new SelectList(Model.Categories.Select(c => new { CategoryID = c.CategoryId, Name = c.Name }), "CategoryID", "Name"),
                                optionLabel: "-",
                                htmlAttributes: new { @class = "form-control" }
                            )
                            @Html.ValidationMessageFor(model => model.CategoryId, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group wide-form-group">
                        @Html.LabelFor(model => model.Title, new { @class = "control-label col-sm-3" })
                        <div class="col-sm-8">
                            @Html.TextBoxFor(model => model.Title, new { @class = "form-control" })
                            @Html.ValidationMessageFor(model => model.Title, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group wide-form-group">
                        @Html.LabelFor(model => model.Content, new { @class = "control-label col-sm-3" })
                        <div class="col-sm-8">
                            @Html.TextAreaFor(model => model.Content, 7, 10, new { @class = "form-control" })
                            @Html.ValidationMessageFor(model => model.Content, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        <div class="col-sm-offset-3 col-sm-8">
                            <input type="submit" value="Create" class="btn btn-primary" />
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>
</main>

<div id="change-requester-dialog" class="modal fade">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times</button>
                <h4 class="modal-title">Change requester</h4>
            </div>

            <div class="modal-body">
                <div class="form-group">
                    <label class="control-label">Find user by name or email</label>
                    <div class="input-with-button">
                        <input data-bind="value: searchedUser" class="form-control" />
                        <button data-bind="click: getUsers" class="btn btn-default btn-search">
                            <span class="glyphicon glyphicon-search"></span>
                        </button>
                    </div>
                </div>

                <div class="form-group">
                    <label>Select user</label>
                    <select size="10" data-bind="options: users, value: selectedUser, optionsText: function(item) { return item.FirstName + ' ' + item.LastName + ' (' + item.Email + ')' }, optionsCaption: '-'" class="form-control"></select>
                    <img id="change-requestor-img" src="http://i.stack.imgur.com/r6tWv.gif" style="display: none" />
                </div>

                <p>Displaying <span data-bind="text: numberOfUsersToDisplay"></span> users of <span data-bind="text: numberOfUsersFound"></span> found</p>
            </div>

            <div class="modal-footer">
                <input data-bind="click: function() { changeRequester(); }" data-dismiss="modal" type="submit" value="Ok" class="btn btn-primary" />
                <input data-dismiss="modal" type="button" value="No" class="btn btn-primary" />
            </div>
        </div>
    </div>
</div>