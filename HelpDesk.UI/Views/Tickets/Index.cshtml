<script>
    function sendAjaxRequest(url, method, data, onSuccess)
    {
        $.ajax(url,
        {
            type: method,
            data: data,
            success: function(response)
            {
                if (response.Success)
                    displayNewSuccessMessage(response.Success);
                if (response.Fail)
                    displayNewFailMessage(response.Fail);
                onSuccess(response);
            },
            error: function()
            {
                displayNewFailMessage("Problem with connection. Try again, and if the problem persists contact your system administrator.");
            },
            beforeSend: showProgressIndicator,
            complete: hideProgressIndicator
        });
    }

    function TicketsViewModel()
    {
        var self = this;

        self.tickets = ko.observableArray([]);
        self.currentTicket = ko.observable();
        self.currentUser = ko.observable();

        self.markSearch = function(text)
        {
            if (self.filter.search() && self.filter.search() != "")
                return text.replace(new RegExp("(" + self.filter.search() + ")", 'gi'), "<mark>$1</mark>");
            else
                return text;
        };        

        self.statuses = ["New", "In progress", "Solved", "Closed"];
        self.administrators = ko.observableArray([]);
        self.categories = ko.observableArray([]);
        self.sortingOptions = ko.observableArray(["Created on", "Requested by", "Title", "Category", "Status"]);

        self.filter =
        {
            status: ko.observable(),
            assignedTo: ko.observable(),
            category: ko.observable(),
            search: ko.observable(),
            advancedSearch: ko.observable(false),
            sortBy: ko.observable("Created on"),
            descSort: ko.observable(true),
            page: ko.observable(1)
        };

        self.numberOfPages = ko.observable();
        self.pages = ko.computed(function()
        {
            var pages = [];
            
            var leftBound = self.filter.page() - 2;
            var rightBound = self.filter.page() + 2;
            while (leftBound < 1)
            {
                leftBound++;
                rightBound++;
            }
            while (rightBound > self.numberOfPages())
            {
                rightBound--;
                if (leftBound > 1)
                    leftBound--;
            }

            for (var i = leftBound; i <= rightBound; i++)
                pages.push(i);
            return pages;
        });

        self.getTickets = function()
        {
            var data = 
            {
                Status: self.filter.status(),
                AssignedToId: self.filter.assignedTo() ? self.filter.assignedTo().UserId : null,
                CategoryId: self.filter.category() ? self.filter.category().CategoryId : null,
                Search: self.filter.search(),
                AdvancedSearch: self.filter.advancedSearch(),
                SortBy: self.filter.sortBy(),
                DescSort: self.filter.descSort(),
                Page: self.filter.page()
            };
            var onSuccess = function(response)
            {
                self.tickets(response.Tickets);
                self.numberOfPages(response.NumberOfPages);
            };
            sendAjaxRequest("/api/Tickets", "GET", data, onSuccess);
        };

        self.getAdministrators = function()
        {
            var data =
            {
                Role: "Admin",
                Page: 0
            };
            var onSuccess = function(response)
            {
                for (var i = 0; i < response.Users.length; i++)
                    response.Users[i].Name = response.Users[i].FirstName + " " + response.Users[i].LastName;
                self.administrators(response.Users);
            };
            sendAjaxRequest("/api/Users", "GET", data, onSuccess);
        };

        self.getCategories = function()
        {
            var onSuccess = function(response)
            {
                self.categories(response);
            };
            sendAjaxRequest("/api/Categories", "GET", null, onSuccess);
        };

        self.assignUser = function()
        {
            var data =
            {
                ticketId: self.currentTicket().TicketId,
                userId: self.currentUser().UserId
            };
            var onSuccess = function()
            {
                var updatedTickets = self.tickets();
                for (var i = 0; i < updatedTickets.length; i++)
                    if (updatedTickets[i].TicketId == data.ticketId)
                    {
                        updatedTickets[i].Status = 'In progress';
                        updatedTickets[i].AssignedUserId = self.currentUser().UserId;
                        updatedTickets[i].AssignedUserName = self.currentUser().Name;
                        self.tickets([]);
                        self.tickets(updatedTickets);
                    }
            }
            sendAjaxRequest("/Tickets/AssignUserToTicket", "POST", data, onSuccess);
        };

        self.solution = ko.observable("");

        self.solveTicket = function()
        {
            var data =
            {
                ticketId: self.currentTicket().TicketId,
                userId: self.currentUser().UserId,
                solution: self.solution()
            };
            var onSuccess = function()
            {
                var updatedTickets = self.tickets();
                for (var i = 0; i < updatedTickets.length; i++)
                    if (updatedTickets[i].TicketId == data.ticketId)
                    {
                        updatedTickets[i].Status = 'Solved';
                        updatedTickets[i].AssignedUserId = self.currentUser().UserId;
                        updatedTickets[i].AssignedUserName = self.currentUser().Name;
                        updatedTickets[i].Solution = self.solution();
                        self.tickets([]);
                        self.tickets(updatedTickets);
                    }
            };
            sendAjaxRequest("/Tickets/SolveTicket", "POST", data, onSuccess);
        };

        self.closeTicket = function()
        {
            var data =
            {
                ticketId: self.currentTicket().TicketId
            };
            var onSuccess = function()
            {
                var updatedTickets = self.tickets();
                for (var i = 0; i < updatedTickets.length; i++)
                    if (updatedTickets[i].TicketId == data.ticketId)
                    {
                        updatedTickets[i].Status = 'Closed';
                        self.tickets([]);
                        self.tickets(updatedTickets);
                    }
            }
            sendAjaxRequest("/Tickets/CloseTicket", "POST", data, onSuccess);         
        };

        self.sort = function(data, event)
        {
            var sortBy = event.target.textContent;
            if (self.filter.sortBy() === sortBy)
                self.filter.descSort(!self.filter.descSort());
            else
                self.filter.sortBy(sortBy);
            self.getTickets();
        };

        self.getSortSymbol = ko.computed(function()
        {
            if (self.filter.descSort())
                return "\u25BC";
            else
                return "\u25B2";
        });        

        self.getTickets();
        self.getAdministrators();
        self.getCategories();
    }

    function formatDate(ticks)
    {
        function padZero(value)
        {
            return value < 10 ? "0" + value : value;
        }

        var date = new Date(Number(ticks));
        var year = date.getFullYear();
        var month = padZero(date.getMonth() + 1);
        var day = padZero(date.getDate());
        var hours = padZero(date.getHours());
        var minutes = padZero(date.getMinutes());
        var seconds = padZero(date.getSeconds());
        return year + "-" + month  + "-" + day + " " + hours + ":" + minutes + ":" + seconds;
    }

    $(document).ready(function()
    {
        ko.applyBindings(new TicketsViewModel());
    });    
</script>

@using HelpDesk.UI.Infrastructure;

@{
    ViewBag.Title = "List of tickets";
    IdentityHelper identityHelper = new IdentityHelper();
}

<header>
    <h1>@ViewBag.Title</h1>
    
    <div class="container">
        <hr />
        <div class="row">
            @if (identityHelper.IsCurrentUserAnAdministrator())
            {
                <div class="form-group col-sm-6 col-md-3">
                    <label class="control-label">Status</label>
                    <select data-bind="options: statuses, value: filter.status, optionsCaption: 'All', event: { change: function() { filter.page(1); getTickets(); } }" class="form-control"></select>
                </div>

                <div class="form-group col-sm-6 col-md-3">
                    <label class="control-label">Assigned to</label>
                    <select data-bind="options: administrators, value: filter.assignedTo, optionsCaption: 'All', optionsText: 'Name' , event: { change: function() { filter.page(1); getTickets(); } }" class="form-control"></select>
                </div>

                <div class="form-group col-sm-6 col-md-3">
                    <label class="control-label">Category</label>
                    <select data-bind="options: categories, value: filter.category, optionsCaption: 'All', optionsText: 'Name', event: { change: function() { filter.page(1); getTickets(); } }" class="form-control"></select>
                </div>
            }

            <div class='@(identityHelper.IsCurrentUserAnAdministrator() ? "form-group col-sm-6 col-md-3" : "form-group col-sm-offset-3 col-sm-6 col-md-offset-4 col-md-4")'>
                <label class="control-label">Search</label>
                <div class="input-with-button">
                    <input data-bind="value: filter.search" class="form-control" />
                    <button data-bind="click: function() { filter.page(1); getTickets(); }" class="btn btn-default glyphicon glyphicon-search"></button>
                </div>
                <div class="checkbox">
                    <label class="control-label">
                        <input data-bind="value: filter.advancedSearch, event: { change: function() { filter.advancedSearch(!filter.advancedSearch()); } }" type="checkbox" />
                        Also search in content and solution
                    </label>
                </div>
            </div>
        </div>  
    </div>                                  
</header>

<section class="container">
    <h3 data-bind="visible: !tickets() || tickets().length === 0">No tickets found...</h3>

    <div data-bind="visible: tickets() && tickets().length != 0">
        <ul data-bind="visible: pages().length >= 2, foreach: pages" class="pagination pull-left">
            <!-- ko if: $data == $root.pages()[0] -->
            <li>
                <a data-bind="click: function() { $root.filter.page(1); $root.getTickets(); }" href="#">&laquo;</a>
            </li>
            <!-- /ko -->
            
            <li data-bind="css: { active: $data == $root.filter.page() }">
                <a data-bind="text: $data, click: function() { $root.filter.page($data); $root.getTickets(); }" href="#"></a>               
            </li>

            <!-- ko if: $data == $root.pages()[$root.pages().length - 1] -->
            <li>
                <a data-bind="click: function() { $root.filter.page($root.numberOfPages()); $root.getTickets(); }" href="#">&raquo;</a>
            </li>
            <!-- /ko -->
        </ul>

        <div class="input-with-button sort-by form-inline pull-right">
            <label class="control-label">Sort by</label>
            <select data-bind="options: sortingOptions, value: filter.sortBy, event: { change: function() { filter.page(1); getTickets(); } }" class="form-control"></select>
            <button data-bind="click: function() { filter.descSort(!filter.descSort()); filter.page(1); getTickets(); }, css: { 'glyphicon-sort-by-attributes': !filter.descSort(), 'glyphicon-sort-by-attributes-alt': filter.descSort() }" class="btn btn-default glyphicon"></button>
        </div>

        <div class="tickets-list" data-bind="foreach: tickets">
            <div class="well" data-bind="click: function() { document.location.href = '/Tickets/Edit/' + TicketId; }">
                <div class="hidden-xs">
                    <p class="text-gray" data-bind="text: '#' + TicketId"></p>
                    <p data-bind="text: Status, css: { 'color-status-new': Status == 'New', 'color-status-in-progress': Status == 'In progress', 'color-status-solved': Status == 'Solved', 'color-status-closed': Status == 'Closed' }"></p>
                </div>

                <div>
                    <p data-bind="html: $root.markSearch(Title)"></p>
                    <p><span class="text-gray">Date:</span> <span data-bind="text: formatDate(CreateDate)"></span></p>
                    <p>
                        <span class="text-gray">User:</span>
                        <span>
                            <a href="#" data-bind="visible: RequesterName, click: function(data, event) { event.stopPropagation(); document.location.href = '/Users/Edit/' + RequesterId; }, text: RequesterName"></a>
                            <span data-bind="visible: !RequesterName">deleted user</span>
                        </span>
                    </p>
                    <p><span class="text-gray">Category:</span> <span data-bind="text: Category ? Category : 'none'"></span></p>
                    <p class="visible-xs">
                        <span class="text-gray">Status:</span>
                        <span data-bind="text: Status, css: { 'color-status-new': Status == 'New', 'color-status-in-progress': Status == 'In progress', 'color-status-solved': Status == 'Solved', 'color-status-closed': Status == 'Closed' }"></span>
                    </p>
                </div>

                @if (identityHelper.IsCurrentUserAnAdministrator())
                {
                    <div class="hidden-xs">
                        <button title="Close ticket" data-bind="click: function(data, event) { $root.currentTicket(data); event.stopPropagation(); $('#close-ticket-dialog').modal('show'); }" class="btn btn-sm btn-inverse pull-right"><span class="glyphicon glyphicon-remove"></span></button>
                        <button title="Solve ticket" data-bind="click: function(data, event) { $root.currentTicket(data); event.stopPropagation(); $('#solve-ticket-dialog').modal('show'); }" class="btn btn-sm btn-success pull-right"><span class="glyphicon glyphicon-ok"></span></button>
                        <button title="Assign administrator to ticket" data-bind="click: function(data, event) { $root.currentTicket(data); event.stopPropagation(); $('#assign-user-dialog').modal('show'); }" class="btn btn-sm btn-primary pull-right">+<span class="glyphicon glyphicon-user"></span></button>
                    </div>
                }
            </div>
        </div>

        <ul data-bind="visible: pages().length >= 2, foreach: pages" class="pagination pull-left">
            <!-- ko if: $data == $root.pages()[0] -->
            <li>
                <a data-bind="click: function() { $root.filter.page(1); $root.getTickets(); }" href="#">&laquo;</a>
            </li>
            <!-- /ko -->

            <li data-bind="css: { active: $data == $root.filter.page() }">
                <a data-bind="text: $data, click: function() { $root.filter.page($data); $root.getTickets(); }" href="#"></a>
            </li>

            <!-- ko if: $data == $root.pages()[$root.pages().length - 1] -->
            <li>
                <a data-bind="click: function() { $root.filter.page($root.numberOfPages()); $root.getTickets(); }" href="#">&raquo;</a>
            </li>
            <!-- /ko -->
        </ul>
    </div>
</section>

@if (identityHelper.IsCurrentUserAnAdministrator())
{
    <!-- ko if: currentTicket() -->
        <div id="assign-user-dialog" class="modal fade">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times</button>
                        <h4 class="modal-title">Assign administrator to ticket</h4>
                    </div>

                    <div class="modal-body">
                        <div class="form-group">
                            <label class="control-label">Administrator</label>
                            <select data-bind="options: administrators, optionsText: 'Name', value: currentUser" class="form-control"></select>
                        </div>
                    </div>

                    <div class="modal-footer">
                        <button data-bind="click: function() { assignUser(); }" data-dismiss="modal" class="btn btn-primary">Ok</button><button data-dismiss="modal" class="btn btn-default">Cancel</button>
                    </div>
                </div>
            </div>
        </div>

        <div id="solve-ticket-dialog" class="modal fade">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times</button>
                        <h4 class="modal-title">Solve ticket</h4>
                    </div>

                    <div class="modal-body">
                        <div class="form-group">
                            <label class="control-label">Administrator</label>
                            <select data-bind="options: administrators, optionsText: 'Name', value: currentUser" class="form-control"></select>
                        </div>

                        <div class="form-group">
                            <label class="control-label">Solution</label>
                            <textarea data-bind="value: solution" cols="10" rows="7" class="form-control"></textarea>
                        </div>
                    </div>

                    <div class="modal-footer">
                        <button data-dismiss="modal" data-bind="click: function() { solveTicket(); }" class="btn btn-primary">Ok</button><button data-dismiss="modal" class="btn btn-default">Cancel</button>
                    </div>
                </div>
            </div>
        </div>

        <div id="close-ticket-dialog" class="modal fade">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times</button>
                        <h4 class="modal-title">Close ticket</h4>
                    </div>

                    <div class="modal-body">
                        Are you sure you want to close ticket?
                    </div>

                    <div class="modal-footer">
                        <button data-dismiss="modal" data-bind="click: function() { closeTicket(); }" class="btn btn-primary">Yes</button><button data-dismiss="modal" class="btn btn-default">No</button>
                    </div>
                </div>
            </div>
        </div>
    <!-- /ko -->
}