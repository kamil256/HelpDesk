@using HelpDesk.UI.Infrastructure;

@model HelpDesk.UI.ViewModels.Tickets.EditViewModel

@{
    ViewBag.Title = "Ticket details";
    IdentityHelper identityHelper = new IdentityHelper();
}

<script>
    function TicketsViewModel()
    {
        var self = this;

        self.requester =
        {
            UserId: ko.observable(@(Model.Requester != null ? Html.Raw($"'{@Model.Requester.Id}'") : null)),
            FirstName: ko.observable(@(Model.Requester != null ? Html.Raw($"'{@Model.Requester.FirstName}'") : null)),
            LastName: ko.observable(@(Model.Requester != null ? Html.Raw($"'{@Model.Requester.LastName}'") : null)),
            Email: ko.observable(@(Model.Requester != null ? Html.Raw($"'{@Model.Requester.Email}'") : null))
        };

        self.requesterNameAndEmail = ko.computed(function()
        {
            return self.requester.UserId() ? self.requester.FirstName() + " " + self.requester.LastName() + " (" + self.requester.Email() + ")" : "-";
        });

        self.searchedUser = ko.observable("");
        self.users = ko.observableArray([]);
        self.numberOfUsersToDisplay = ko.computed(function()
        {
            return self.users().length;
        });
        self.numberOfUsersFound = ko.observable(0);
        self.selectedUser = ko.observable();
        self.getUsers = function()
        {
            $.ajax("/api/Users",
            {
                type: "GET",
                data:
                {
                    search: self.searchedUser(),
                    advancedSearch: false,
                    page: 1,
                    usersPerPage: 1
                },
                success: function(data)
                {
                    self.users(data.Users);
                    self.numberOfUsersFound(data.NumberOfUsersFound);
                },
                error: function()
                {
                    displayNewFailMessage("Problem with connection. Try again, and if the problem persists contact your system administrator.");
                }
            });
        };

        self.changeRequester = function()
        {
            if (self.selectedUser())
            {
                self.requester.UserId(self.selectedUser().UserId);
                self.requester.FirstName(self.selectedUser().FirstName);
                self.requester.LastName(self.selectedUser().LastName);
                self.requester.Email(self.selectedUser().Email);
            }
            else
            {
                self.requester.UserId(null);
                self.requester.FirstName(null);
                self.requester.LastName(null);
                self.requester.Email(null);
            }
        }
    }

    $(document).ready(function()
    {
        ko.applyBindings(new TicketsViewModel());

    });
</script>

<header style="margin: 0">
    <div class="container">
        <h1>Ticket details</h1>
    </div>
</header>

<section class="container" style="padding: 0;">
    <style>
        @@media (min-width: 768px) {
            .details-panel {
                background-color: #F5F5F5;
                box-shadow: gray 0 0 10px;
                border-radius: 5px;
                padding: 30px 0;
            }
        }

        @@media (max-width: 767px) {
            .details-panel {
                padding: 0 !important;
            }
        }
    </style>

    <ul class="horizontal-menu">
        <li class="selected"><a href='@Url.Action("Edit", new { id = Model.TicketId })'>Details</a></li>
        <li><a href='@Url.Action("History", new { id = Model.TicketId })'>History</a></li>
    </ul>
</section>



<div class="container">
    @using (Html.BeginForm())
    {
        @Html.AntiForgeryToken()
        <div class="form-horizontal details-panel col-md-offset-1 col-md-10 col-lg-offset-2 col-lg-8" style="padding: 15px 0;  padding-top: 30px;">
            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
            
            <div class="form-group">
                @Html.Label("ID", new { @class = "control-label col-sm-3" })
                <div class="col-sm-8">
                    <p class="form-control-static">
                        @Html.DisplayFor(model => model.TicketId)
                        @Html.HiddenFor(model => model.TicketId)
                    </p>
                    @Html.ValidationMessageFor(model => model.TicketId, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.CreateDate, new { @class = "control-label col-sm-3" })
                <div class="col-sm-8">
                    <p class="form-control-static">
                        @Model.CreateDate
                    </p>
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Creator, new { @class = "control-label col-sm-3" })
                <div class="col-sm-8">
                    <p class="form-control-static">
                        @if (Model.Creator != null)
                        {
                            <a href='@Url.Action("Edit", "Users", new { id = Model.Creator.Id })'>@Model.Creator.FirstName @Model.Creator.LastName (@Model.Creator.Email)</a>
                        }
                        else
                        {
                            <span>Deleted user</span>
                        }
                    </p>
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.RequesterId, new { @class = "control-label col-sm-3" })
                <div class="col-sm-8 input-with-button">
                    <input type="hidden" name="RequesterId" data-bind="value: requester.UserId" />
                    <input data-bind="value: requesterNameAndEmail" class="form-control" disabled="disabled" />
                    <button type="button" data-bind="click: function(data, event) { $('#change-requester-dialog').modal('show'); }" class="btn btn-default btn-search">
                        <span class="glyphicon glyphicon-search"></span>
                    </button>
                    @Html.ValidationMessageFor(model => model.RequesterId, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.AssignedUserId, new { @class = "control-label col-sm-3" })
                <div class="col-sm-8">
                    @if (identityHelper.IsCurrentUserAnAdministrator())
                    {
                        @Html.DropDownListFor(
                                 expression: model => model.AssignedUserId,
                                 selectList: new SelectList(Model.Administrators.Select(u => new { UserId = u.Id, Name = $"{u.FirstName} {u.LastName}" }), "UserId", "Name"),
                                 optionLabel: "-",
                                 htmlAttributes: new { @class = "form-control" }
                        )
                        @Html.ValidationMessageFor(model => model.AssignedUserId, "", new { @class = "text-danger" })
                    }
                    else
                    {
                        <input value='@(Model.AssignedUser != null ? $"{Model.AssignedUser.FirstName} {Model.AssignedUser.LastName} ({Model.AssignedUser.Email})" : "-")' class="form-control" disabled="disabled" />
                    }                    
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Status, new { @class = "control-label col-sm-3" })
                <div class="col-sm-8">
                    @if (identityHelper.IsCurrentUserAnAdministrator())
                    {
                        @Html.DropDownListFor(model => model.Status, new SelectList(new[] { "New", "In progress", "Solved", "Closed" }), new { @class = "form-control" })
                    }
                    else
                    {
                        <input value='@Model.Status' class="form-control" disabled="disabled" />
                    }
                    @Html.ValidationMessageFor(model => model.Status, "", new { @class = "text-danger" })
                </div>
            </div>
            
            <div class="form-group">
                @Html.LabelFor(model => model.CategoryId, new { @class = "control-label col-sm-3" })
                <div class="col-sm-8">
                    @Html.DropDownListFor(
                        expression: model => model.CategoryId,
                        selectList: new SelectList(Model.Categories.Select(c => new { CategoryId = c.CategoryId, Name = c.Name }), "CategoryId", "Name"),
                        optionLabel: "-",
                        htmlAttributes: new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.CategoryId, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Title, new { @class = "control-label col-sm-3" })
                <div class="col-sm-8">
                    @Html.TextBoxFor(model => model.Title, new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.Title, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Content, new { @class = "control-label col-sm-3" })
                <div class="col-sm-8">
                    @Html.TextAreaFor(model => model.Content, 7, 10, new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.Content, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Solution, new { @class = "control-label col-sm-3" })
                <div class="col-sm-8">
                    @{ 
                        Dictionary<string, object> htmlAttributes = new Dictionary<string, object>();
                        htmlAttributes["class"] = "form-control";
                        if (!identityHelper.IsCurrentUserAnAdministrator())
                        {
                            htmlAttributes["disabled"] = "disabled";
                        }
                    }
                    @Html.TextAreaFor(model => model.Solution, 7, 10, htmlAttributes)
                    @Html.ValidationMessageFor(model => model.Solution, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                <div class="col-sm-offset-3 col-sm-8">
                    <input type="submit" value="Save" class="btn btn-blue" />
                    @if (identityHelper.IsCurrentUserAnAdministrator())
                    {
                        <a href="#delete-ticket-dialog" class="btn btn-danger" data-toggle="modal">Delete</a>
                    }
                </div>
            </div>
        </div>
    }
</div>

<div id="change-requester-dialog" class="modal fade">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times</button>
                <h4 class="modal-title">Change requester</h4>
            </div>

            <div class="modal-body">
                <div class="form-group">
                    <label class="control-label">Find user by name or email</label>
                    <div class="input-with-button">
                        <input data-bind="value: searchedUser" class="form-control" />
                        <button data-bind="click: getUsers" class="btn btn-default btn-search">
                            <span class="glyphicon glyphicon-search"></span>
                        </button>
                    </div>
                </div>

                <div class="form-group">
                    <label>Select user</label>
                    <select size="10" data-bind="options: users, value: selectedUser, optionsText: function(item) { return item.FirstName + ' ' + item.LastName + ' (' + item.Email + ')' }, optionsCaption: '-'" class="form-control"></select>
                    <img id="change-requestor-img" src="http://i.stack.imgur.com/r6tWv.gif" style="display: none" />
                </div>

                <p>Displaying <span data-bind="text: numberOfUsersToDisplay"></span> users of <span data-bind="text: numberOfUsersFound"></span> found</p>
            </div>

            <div class="modal-footer">
                <input data-bind="click: function() { changeRequester(); }" data-dismiss="modal" type="submit" value="Ok" class="btn btn-primary" />
                <input data-dismiss="modal" type="button" value="No" class="btn btn-primary" />
            </div>
        </div>
    </div>
</div>

@if (identityHelper.IsCurrentUserAnAdministrator())
{
    <div id="delete-ticket-dialog" class="modal fade">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times</button>
                    <h4 class="modal-title">Confirmation</h4>
                </div>

                @using (Html.BeginForm("Delete", "Tickets"))
                {
                    @Html.AntiForgeryToken()
                    @Html.HiddenFor(model => model.TicketId)
                    <div class="modal-body">
                        <p>Are you sure you want to delete ticket?</p>
                    </div>

                    <div class="modal-footer">
                        <input type="submit" value="Yes" class="btn btn-danger" />
                        <input data-dismiss="modal" type="button" value="No" class="btn btn-primary" />
                    </div>
                }
            </div>
        </div>
    </div>
}
