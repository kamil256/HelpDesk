@using HelpDesk.UI.Infrastructure;

@model HelpDesk.UI.ViewModels.Tickets.EditViewModel

@{
    ViewBag.Title = "Ticket details";
    IdentityHelper identityHelper = new IdentityHelper();
}

<script>
    function sendAjaxRequest(url, method, data, onSuccess)
    {
        $.ajax(url,
        {
            type: method,
            data: data,
            success: function(response)
            {
                if (response.Success)
                    displayNewSuccessMessage(response.Success);
                if (response.Fail)
                    displayNewFailMessage(response.Fail);
                onSuccess(response);
            },
            error: function()
            {
                displayNewFailMessage("Problem with connection. Try again, and if the problem persists contact your system administrator.");
            },
            beforeSend: showProgressIndicator,
            complete: hideProgressIndicator
        });
    }

    function TicketsViewModel()
    {
        var self = this;

        self.requester =
        {
            UserId: ko.observable(@(Model.Requester != null ? Html.Raw($"'{@Model.Requester.Id}'") : null)),
            FirstName: ko.observable(@(Model.Requester != null ? Html.Raw($"'{@Model.Requester.FirstName}'") : null)),
            LastName: ko.observable(@(Model.Requester != null ? Html.Raw($"'{@Model.Requester.LastName}'") : null)),
            Email: ko.observable(@(Model.Requester != null ? Html.Raw($"'{@Model.Requester.Email}'") : null))
        };

        self.requesterNameAndEmail = ko.computed(function()
        {
            return self.requester.UserId() ? self.requester.FirstName() + " " + self.requester.LastName() + " (" + self.requester.Email() + ")" : "-";
        });

        self.searchedUser = ko.observable("");
        self.users = ko.observableArray([]);
        self.numberOfUsersToDisplay = ko.computed(function()
        {
            return self.users().length;
        });
        self.numberOfUsersFound = ko.observable(0);
        self.selectedUser = ko.observable();
        self.getUsers = function()
        {
            var data =
            {
                search: self.searchedUser(),
                advancedSearch: false,
                page: 1,
                usersPerPage: 1
            };
            var onSuccess = function(response)
            {
                self.users(response.Users);
                self.numberOfUsersFound(response.NumberOfUsersFound);
            };
            sendAjaxRequest("/api/Users", "GET", data, onSuccess);
        };

        self.changeRequester = function()
        {
            if (self.selectedUser())
            {
                self.requester.UserId(self.selectedUser().UserId);
                self.requester.FirstName(self.selectedUser().FirstName);
                self.requester.LastName(self.selectedUser().LastName);
                self.requester.Email(self.selectedUser().Email);
            }
            else
            {
                self.requester.UserId(null);
                self.requester.FirstName(null);
                self.requester.LastName(null);
                self.requester.Email(null);
            }
        }
    }

    $(document).ready(function()
    {
        ko.applyBindings(new TicketsViewModel());

    });
</script>

<header>
    <h1>@ViewBag.Title</h1>
</header>

<nav class="container horizontal-menu hidden-xs">
    @Html.ActionLink("Details", "Edit", new { id = Model.TicketId }, new { @class = "selected" })
    @Html.ActionLink("History", "History", new { id = Model.TicketId })
</nav>

<nav class="tickets-menu container btn-group horizontal-menu-xs visible-xs">
    <a href="@Url.Action("Details", new { id = Model.TicketId })" class="btn btn-primary glyphicon glyphicon-pencil active"></a>
    <a href="@Url.Action("History", new { id = Model.TicketId })" class="btn btn-primary glyphicon glyphicon-time"></a>
</nav>

<main class="container">
    <div class="row">
        <div class="col-md-offset-1 col-md-10 col-lg-offset-2 col-lg-8">
            <div class="well">
                <p class="text-center text-gray">#@Model.TicketId</p>

                @Html.ValidationSummary(true, "", new { @class = "text-danger" })

                @using (Html.BeginForm("Edit", "Tickets", FormMethod.Post, new { @class = "form-horizontal" }))
                {
                    @Html.AntiForgeryToken()

                    @Html.HiddenFor(model => model.TicketId)

                    <div class="form-group">
                        @Html.LabelFor(model => model.CreateDate, new { @class = "control-label col-sm-3" })
                        <div class="col-sm-8">
                            <p class="form-control-static">
                                @Model.CreateDate
                            </p>
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.Creator, new { @class = "control-label col-sm-3" })
                        <div class="col-sm-8">
                            <p class="form-control-static">
                                @if (Model.Creator != null)
                                {
                                    <a href='@Url.Action("Edit", "Users", new { id = Model.Creator.Id })'>@Model.Creator.FirstName @Model.Creator.LastName (@Model.Creator.Email)</a>
                                }
                                else
                                {
                                    <span>Deleted user</span>
                                }
                            </p>
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.RequesterId, new { @class = "control-label col-sm-3" })
                        <input type="hidden" name="RequesterId" data-bind="value: requester.UserId" />
                        <div class="col-sm-8 input-with-button">
                            <div class="input-with-button">
                                <input data-bind="value: requesterNameAndEmail" class="form-control" disabled="disabled" />
                                <button type="button" data-bind="click: function(data, event) { $('#change-requester-dialog').modal('show'); }" class="btn btn-default btn-search glyphicon glyphicon-search"></button>
                            </div>
                            @Html.ValidationMessageFor(model => model.RequesterId, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.AssignedUserId, new { @class = "control-label col-sm-3" })
                        <div class="col-sm-8">
                            @if (identityHelper.IsCurrentUserAnAdministrator())
                            {
                                @Html.DropDownListFor(
                                expression: model => model.AssignedUserId,
                                selectList: new SelectList(Model.Administrators.Select(u => new { UserId = u.Id, Name = $"{u.FirstName} {u.LastName}" }), "UserId", "Name"),
                                optionLabel: "-",
                                htmlAttributes: new { @class = "form-control" }
                    )
                                @Html.ValidationMessageFor(model => model.AssignedUserId, "", new { @class = "text-danger" })
                            }
                            else
                            {
                                <input value='@(Model.AssignedUser != null ? $"{Model.AssignedUser.FirstName} {Model.AssignedUser.LastName} ({Model.AssignedUser.Email})" : "-")' class="form-control" disabled="disabled" />
                            }
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.Status, new { @class = "control-label col-sm-3" })
                        <div class="col-sm-8">
                            @if (identityHelper.IsCurrentUserAnAdministrator())
                            {
                                @Html.DropDownListFor(model => model.Status, new SelectList(new[] { "New", "In progress", "Solved", "Closed" }), new { @class = "form-control" })
                            }
                            else
                            {
                                <input value='@Model.Status' class="form-control" disabled="disabled" />
                            }
                            @Html.ValidationMessageFor(model => model.Status, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.CategoryId, new { @class = "control-label col-sm-3" })
                        <div class="col-sm-8">
                            @Html.DropDownListFor(
                    expression: model => model.CategoryId,
                    selectList: new SelectList(Model.Categories.Select(c => new { CategoryId = c.CategoryId, Name = c.Name }), "CategoryId", "Name"),
                    optionLabel: "-",
                    htmlAttributes: new { @class = "form-control" })
                            @Html.ValidationMessageFor(model => model.CategoryId, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.Title, new { @class = "control-label col-sm-3" })
                        <div class="col-sm-8">
                            @Html.TextBoxFor(model => model.Title, new { @class = "form-control" })
                            @Html.ValidationMessageFor(model => model.Title, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.Content, new { @class = "control-label col-sm-3" })
                        <div class="col-sm-8">
                            @Html.TextAreaFor(model => model.Content, 7, 10, new { @class = "form-control" })
                            @Html.ValidationMessageFor(model => model.Content, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.Solution, new { @class = "control-label col-sm-3" })
                        <div class="col-sm-8">
                            @{
                                Dictionary<string, object> htmlAttributes = new Dictionary<string, object>();
                                htmlAttributes["class"] = "form-control";
                                if (!identityHelper.IsCurrentUserAnAdministrator())
                                {
                                    htmlAttributes["disabled"] = "disabled";
                                }
                            }
                            @Html.TextAreaFor(model => model.Solution, 7, 10, htmlAttributes)
                            @Html.ValidationMessageFor(model => model.Solution, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        <div class="col-sm-offset-3 col-sm-8">
                            <input type="submit" value="Save" class="btn btn-primary" />
                            @if (identityHelper.IsCurrentUserAnAdministrator())
                            {
                                <a href="#delete-ticket-dialog" class="btn btn-danger" data-toggle="modal">Delete</a>
                            }
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>
</main>

<div id="change-requester-dialog" class="modal fade">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times</button>
                <h4 class="modal-title">Change requester</h4>
            </div>

            <div class="modal-body">
                <div class="form-group">
                    <label class="control-label">Find user by name or email</label>
                    <div class="input-with-button">
                        <input data-bind="value: searchedUser" class="form-control" />
                        <button data-bind="click: getUsers" class="btn btn-default btn-search">
                            <span class="glyphicon glyphicon-search"></span>
                        </button>
                    </div>
                </div>

                <div class="form-group">
                    <label>Select user</label>
                    <select size="10" data-bind="options: users, value: selectedUser, optionsText: function(item) { return item.FirstName + ' ' + item.LastName + ' (' + item.Email + ')' }, optionsCaption: '-'" class="form-control"></select>
                    <img id="change-requestor-img" src="http://i.stack.imgur.com/r6tWv.gif" style="display: none" />
                </div>

                <p>Displaying <span data-bind="text: numberOfUsersToDisplay"></span> users of <span data-bind="text: numberOfUsersFound"></span> found</p>
            </div>

            <div class="modal-footer">
                <input data-bind="click: function() { changeRequester(); }" data-dismiss="modal" type="submit" value="Ok" class="btn btn-primary" /><input data-dismiss="modal" type="button" value="Cancel" class="btn btn-default" />
            </div>
        </div>
    </div>
</div>

@if (identityHelper.IsCurrentUserAnAdministrator())
{
    <div id="delete-ticket-dialog" class="modal fade">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times</button>
                    <h4 class="modal-title">Confirmation</h4>
                </div>

                @using (Html.BeginForm("Delete", "Tickets"))
{
                    @Html.AntiForgeryToken()
                    @Html.HiddenFor(model => model.TicketId)
                    <div class="modal-body">
                        <p>Are you sure you want to delete ticket?</p>
                    </div>

                    <div class="modal-footer">
                        <input type="submit" value="Yes" class="btn btn-danger" /><input data-dismiss="modal" type="button" value="No" class="btn btn-default" />
                    </div>
                }
            </div>
        </div>
    </div>
}